{"version":3,"file":"xjx.min.js","sources":["../../src/core/types/errors.ts","../../src/core/DOMAdapter.ts","../../src/core/utils/JsonUtils.ts","../../src/core/transforms/TransformUtil.ts","../../src/core/XmlToJsonConverter.ts","../../src/core/utils/XmlUtils.ts","../../src/core/JsonToXmlConverter.ts","../../src/core/config/config.ts","../../src/XJX.ts","../../src/core/transforms/ValueTransformer.ts"],"sourcesContent":["/**\n * Error classes for the XJX library\n */\n\n/**\n * Base error class\n */\nexport class XJXError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'XMLToJSONError';\n  }\n}\n\n/**\n * Error for XML parsing issues\n */\nexport class XMLParseError extends XJXError {\n  constructor(message: string) {\n    super(`XML parse error: ${message}`);\n    this.name = 'XMLParseError';\n  }\n}\n\n/**\n * Error for XML serialization issues\n */\nexport class XMLSerializeError extends XJXError {\n  constructor(message: string) {\n    super(`XML serialize error: ${message}`);\n    this.name = 'XMLSerializeError';\n  }\n}\n\n/**\n * Error for environment incompatibility\n */\nexport class EnvironmentError extends XJXError {\n  constructor(message: string) {\n    super(`Environment error: ${message}`);\n    this.name = 'EnvironmentError';\n  }\n}\n\n/**\n * Error for invalid configuration\n */\nexport class ConfigurationError extends XJXError {\n  constructor(message: string) {\n    super(`Configuration error: ${message}`);\n    this.name = 'ConfigurationError';\n  }\n}","/**\n * DOM Environment provider with unified interface for browser and Node.js\n */\nimport { XJXError } from './types/errors';\n\ninterface NodeTypes {\n  ELEMENT_NODE: number;\n  TEXT_NODE: number;\n  CDATA_SECTION_NODE: number;\n  COMMENT_NODE: number;\n  PROCESSING_INSTRUCTION_NODE: number;\n  DOCUMENT_NODE: number; \n}\n\ninterface DOMWindow {\n  DOMParser: any;\n  XMLSerializer: any;\n  Node: {\n    ELEMENT_NODE: number;\n    TEXT_NODE: number;\n    CDATA_SECTION_NODE: number;\n    COMMENT_NODE: number;\n    PROCESSING_INSTRUCTION_NODE: number;\n    DOCUMENT_NODE: number; \n  };\n  document: Document;\n  close?: () => void; \n}\n\ninterface JSDOMInstance {\n  window: DOMWindow;\n}\n\nexport const DOMAdapter = (() => {\n  // Environment-specific DOM implementation\n  let domParser: any;\n  let xmlSerializer: any;\n  let nodeTypes: NodeTypes;\n  let docImplementation: any;\n  let jsdomInstance: JSDOMInstance | null = null;\n\n  try {\n    if (typeof window === \"undefined\") {\n      // Node.js environment - try JSDOM first\n      try {\n        const { JSDOM } = require(\"jsdom\");\n        jsdomInstance = new JSDOM(\"<!DOCTYPE html><html><body></body></html>\", {\n          contentType: \"text/xml\",\n        }) as JSDOMInstance;\n\n        domParser = jsdomInstance.window.DOMParser;\n        xmlSerializer = jsdomInstance.window.XMLSerializer;\n        nodeTypes = {\n          ELEMENT_NODE: jsdomInstance.window.Node.ELEMENT_NODE,\n          TEXT_NODE: jsdomInstance.window.Node.TEXT_NODE,\n          CDATA_SECTION_NODE: jsdomInstance.window.Node.CDATA_SECTION_NODE,\n          COMMENT_NODE: jsdomInstance.window.Node.COMMENT_NODE,\n          PROCESSING_INSTRUCTION_NODE: jsdomInstance.window.Node.PROCESSING_INSTRUCTION_NODE,\n          DOCUMENT_NODE: jsdomInstance.window.Node.DOCUMENT_NODE, // Add this line\n        };\n        docImplementation = jsdomInstance.window.document.implementation;\n      } catch (jsdomError) {\n        // Fall back to xmldom if JSDOM isn't available\n        try {\n          const { DOMParser, XMLSerializer, DOMImplementation } = require('@xmldom/xmldom');\n          domParser = DOMParser;\n          xmlSerializer = XMLSerializer;\n          // Standard DOM node types\n          nodeTypes = {\n            ELEMENT_NODE: 1,\n            TEXT_NODE: 3,\n            CDATA_SECTION_NODE: 4,\n            COMMENT_NODE: 8,\n            PROCESSING_INSTRUCTION_NODE: 7,\n            DOCUMENT_NODE: 9, \n          };\n          const implementation = new DOMImplementation();\n          docImplementation = implementation;\n        } catch (xmldomError) {\n          throw new XJXError(`Node.js environment detected but neither 'jsdom' nor '@xmldom/xmldom' are available.`);\n        }\n      }\n    } else {\n      // Browser environment\n      if (!window.DOMParser) {\n        throw new XJXError(\"DOMParser is not available in this environment\");\n      }\n\n      if (!window.XMLSerializer) {\n        throw new XJXError(\"XMLSerializer is not available in this environment\");\n      }\n\n      domParser = window.DOMParser;\n      xmlSerializer = window.XMLSerializer;\n      nodeTypes = {\n        ELEMENT_NODE: Node.ELEMENT_NODE,\n        TEXT_NODE: Node.TEXT_NODE,\n        CDATA_SECTION_NODE: Node.CDATA_SECTION_NODE,\n        COMMENT_NODE: Node.COMMENT_NODE,\n        PROCESSING_INSTRUCTION_NODE: Node.PROCESSING_INSTRUCTION_NODE,\n        DOCUMENT_NODE: Node.DOCUMENT_NODE, \n      };\n      docImplementation = document.implementation;\n    }\n  } catch (error) {\n    throw new XJXError(`DOM environment initialization failed: ${error instanceof Error ? error.message : String(error)}`);\n  }\n\n  return {\n    createParser: () => {\n      try {\n        return new domParser();\n      } catch (error) {\n        throw new XJXError(`Failed to create DOM parser: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createSerializer: () => {\n      try {\n        return new xmlSerializer();\n      } catch (error) {\n        throw new XJXError(`Failed to create XML serializer: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    nodeTypes,\n    \n    parseFromString: (xmlString: string, contentType: string = 'text/xml') => {\n      try {\n        const parser = new domParser();\n        return parser.parseFromString(xmlString, contentType);\n      } catch (error) {\n        throw new XJXError(`Failed to parse XML: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    serializeToString: (node: Node) => {\n      try {\n        const serializer = new xmlSerializer();\n        return serializer.serializeToString(node);\n      } catch (error) {\n        throw new XJXError(`Failed to serialize XML: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createDocument: () => {\n      try {\n        // For browsers, create a document with a root element to avoid issues\n        if (typeof window !== \"undefined\") {\n          const parser = new domParser();\n          return parser.parseFromString('<temp></temp>', 'text/xml');\n        } else {\n          return docImplementation.createDocument(null, null, null);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create document: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createElement: (tagName: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createElement(tagName);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createElement(tagName);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create element: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createElementNS: (namespaceURI: string, qualifiedName: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createElementNS(namespaceURI, qualifiedName);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createElementNS(namespaceURI, qualifiedName);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create element with namespace: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createTextNode: (data: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createTextNode(data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createTextNode(data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create text node: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createCDATASection: (data: string) => {\n      try {\n        // For browser compatibility, use document.implementation to create CDATA\n        if (typeof window !== \"undefined\") {\n          const doc = document.implementation.createDocument(null, null, null);\n          return doc.createCDATASection(data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createCDATASection(data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create CDATA section: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createComment: (data: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createComment(data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createComment(data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create comment: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createProcessingInstruction: (target: string, data: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          const doc = document.implementation.createDocument(null, null, null);\n          return doc.createProcessingInstruction(target, data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createProcessingInstruction(target, data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create processing instruction: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    // New helper methods\n    \n    /**\n     * Creates a proper namespace qualified attribute\n     */\n    setNamespacedAttribute: (element: Element, namespaceURI: string | null, qualifiedName: string, value: string): void => {\n      try {\n        if (namespaceURI) {\n          element.setAttributeNS(namespaceURI, qualifiedName, value);\n        } else {\n          element.setAttribute(qualifiedName, value);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to set attribute: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    /**\n     * Check if an object is a DOM node\n     */\n    isNode: (obj: any): boolean => {\n      try {\n        return obj && typeof obj === 'object' && typeof obj.nodeType === 'number';\n      } catch (error) {\n        return false;\n      }\n    },\n    \n    /**\n     * Get DOM node type as string for debugging\n     */\n    getNodeTypeName: (nodeType: number): string => {\n      switch (nodeType) {\n        case nodeTypes.ELEMENT_NODE: return 'ELEMENT_NODE';\n        case nodeTypes.TEXT_NODE: return 'TEXT_NODE';\n        case nodeTypes.CDATA_SECTION_NODE: return 'CDATA_SECTION_NODE';\n        case nodeTypes.COMMENT_NODE: return 'COMMENT_NODE';\n        case nodeTypes.PROCESSING_INSTRUCTION_NODE: return 'PROCESSING_INSTRUCTION_NODE';\n        default: return `UNKNOWN_NODE_TYPE(${nodeType})`;\n      }\n    },\n    \n    /**\n     * Get all node attributes as an object\n     */\n    getNodeAttributes: (node: Element): Record<string, string> => {\n      const result: Record<string, string> = {};\n      for (let i = 0; i < node.attributes.length; i++) {\n        const attr = node.attributes[i];\n        result[attr.name] = attr.value;\n      }\n      return result;\n    },\n    \n    // Cleanup method (mainly for JSDOM)\n    cleanup: () => {\n      if (jsdomInstance && typeof jsdomInstance.window.close === 'function') {\n        jsdomInstance.window.close();\n      }\n    }\n  };\n})();","/**\n * JSONUtil - Utility functions for JSON processing\n */\nimport { Configuration } from \"../types/types\";\n\nexport class JSONUtil {\n  private config: Configuration;\n\n  /**\n   * Constructor for JSONUtil\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n  }\n\n  /**\n   * Safely retrieves a value from a JSON object using a dot-separated path.\n   * Automatically traverses into children arrays and flattens results.\n   *\n   * @param obj The input JSON object\n   * @param path The dot-separated path string (e.g., \"root.item.description.$val\")\n   * @param fallback Value to return if the path does not resolve\n   * @returns Retrieved value or fallback\n   */\n  getPath(\n    obj: Record<string, any>,\n    path: string,\n    fallback: any = undefined\n  ): any {\n    const segments = path.split(\".\");\n    let current: any = obj;\n\n    for (const segment of segments) {\n      if (Array.isArray(current)) {\n        // Apply the segment to each array element and flatten results\n        const results = current\n          .map((item) => this.resolveSegment(item, segment))\n          .flat()\n          .filter((v) => v !== undefined);\n        current = results.length > 0 ? results : undefined;\n      } else {\n        current = this.resolveSegment(current, segment);\n      }\n\n      if (current === undefined) return fallback;\n    }\n\n    // Collapse singleton arrays\n    if (Array.isArray(current) && current.length === 1) {\n      return current[0];\n    }\n\n    return current !== undefined ? current : fallback;\n  }\n\n  /**\n   * Resolves a single path segment in the context of a JSON object.\n   * Falls back to searching children for matching keys.\n   *\n   * @param obj The current object\n   * @param segment The path segment to resolve\n   * @returns Resolved value or undefined\n   */\n  private resolveSegment(obj: any, segment: string): any {\n    if (obj == null || typeof obj !== \"object\") return undefined;\n\n    // Direct property access\n    if (segment in obj) {\n      return obj[segment];\n    }\n\n    // Check if this is a special property name that matches the config\n    if (\n      segment === this.config.propNames.value ||\n      segment === this.config.propNames.children ||\n      segment === this.config.propNames.attributes ||\n      segment === this.config.propNames.namespace ||\n      segment === this.config.propNames.prefix ||\n      segment === this.config.propNames.cdata ||\n      segment === this.config.propNames.comments ||\n      segment === this.config.propNames.instruction ||\n      segment === this.config.propNames.target\n    ) {\n      const configKey = Object.entries(this.config.propNames).find(\n        ([_, value]) => value === segment\n      )?.[0];\n\n      if (configKey && obj[segment] !== undefined) {\n        return obj[segment];\n      }\n    }\n\n    // Check children for objects that contain the segment\n    const childrenKey = this.config.propNames.children;\n    const children = obj[childrenKey];\n    if (Array.isArray(children)) {\n      const matches = children\n        .map((child) => (segment in child ? child[segment] : undefined))\n        .filter((v) => v !== undefined);\n      return matches.length > 0 ? matches : undefined;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Converts a plain JSON object to the XML-like JSON structure.\n   * Optionally wraps the result in a root element with attributes and namespaces.\n   *\n   * @param obj Standard JSON object\n   * @param root Optional root element configuration (either a string or object with $ keys)\n   * @returns XML-like JSON object\n   */\n  fromJSONObject(obj: any, root?: any): any {\n    const wrappedObject = this.wrapObject(obj);\n\n    if (typeof root === \"string\") {\n      // Root is a simple string: wrap result with this root tag\n      return { [root]: wrappedObject };\n    }\n\n    if (root && typeof root === \"object\") {\n      // Handle root with config-based keys\n      const elementName = root.name || \"root\"; // Default to \"root\" if no name is provided\n      const prefix = root[this.config.propNames.prefix] || \"\";\n      const qualifiedName = prefix ? `${prefix}:${elementName}` : elementName;\n\n      const result: any = {\n        [qualifiedName]: {},\n      };\n\n      // Add attributes to the root element if defined\n      const attrsKey = this.config.propNames.attributes;\n      if (root[attrsKey] && Array.isArray(root[attrsKey])) {\n        result[qualifiedName][attrsKey] = root[attrsKey];\n      }\n\n      // Merge existing children with the new generated children\n      const childrenKey = this.config.propNames.children;\n      const children = root[childrenKey] ? root[childrenKey] : [];\n      result[qualifiedName][childrenKey] = [\n        ...children,\n        { [elementName]: wrappedObject },\n      ];\n\n      // Add namespace and prefix if defined\n      const nsKey = this.config.propNames.namespace;\n      if (root[nsKey]) {\n        result[qualifiedName][nsKey] = root[nsKey];\n      }\n\n      if (prefix && root[nsKey]) {\n        result[qualifiedName][`xmlns:${prefix}`] = root[nsKey];\n      }\n\n      return result;\n    }\n\n    // Default behavior if no root is provided\n    return wrappedObject;\n  }\n\n  /**\n   * Wraps a standard JSON value in the XML-like JSON structure\n   * @param value Value to wrap\n   * @returns Wrapped value\n   */\n  private wrapObject(value: any): any {\n    const valKey = this.config.propNames.value;\n    const childrenKey = this.config.propNames.children;\n\n    if (\n      value === null ||\n      typeof value === \"string\" ||\n      typeof value === \"number\" ||\n      typeof value === \"boolean\"\n    ) {\n      return { [valKey]: value };\n    }\n\n    if (Array.isArray(value)) {\n      // For arrays, wrap each item and return as a children-style array of repeated elements\n      return {\n        [childrenKey]: value.map((item) => {\n          return this.wrapObject(item);\n        }),\n      };\n    }\n\n    if (typeof value === \"object\") {\n      // It's an object: wrap its properties in children\n      const children = Object.entries(value).map(([key, val]) => ({\n        [key]: this.wrapObject(val),\n      }));\n\n      return { [childrenKey]: children };\n    }\n\n    return undefined; // Fallback for unhandled types\n  }\n\n  /**\n   * Check if an object is empty\n   * @param value Value to check\n   * @returns true if empty\n   */\n  isEmpty(value: any): boolean {\n    if (value == null) return true;\n    if (Array.isArray(value)) return value.length === 0;\n    if (typeof value === \"object\") return Object.keys(value).length === 0;\n    return false;\n  }\n\n  /**\n   * Safely stringify JSON for debugging\n   * @param obj Object to stringify\n   * @param indent Optional indentation level\n   * @returns JSON string representation\n   */\n  safeStringify(obj: any, indent: number = 2): string {\n    try {\n      return JSON.stringify(obj, null, indent);\n    } catch (error) {\n      return \"[Cannot stringify object]\";\n    }\n  }\n\n  /**\n   * Deep clone an object\n   * @param obj Object to clone\n   * @returns Cloned object\n   */\n  deepClone(obj: any): any {\n    try {\n      return JSON.parse(JSON.stringify(obj));\n    } catch (error) {\n      throw new Error(\n        `Failed to deep clone object: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Deep merge two objects with proper type handling\n   * @param target Target object\n   * @param source Source object\n   * @returns Merged object (target is modified)\n   */\n  deepMerge<T>(target: T, source: Partial<T>): T {\n    if (!source || typeof source !== \"object\" || source === null) {\n      return target;\n    }\n\n    if (!target || typeof target !== \"object\" || target === null) {\n      return source as unknown as T;\n    }\n\n    Object.keys(source).forEach((key) => {\n      const sourceValue = source[key as keyof Partial<T>];\n      const targetValue = target[key as keyof T];\n\n      // If both source and target values are objects, recursively merge them\n      if (\n        sourceValue !== null &&\n        targetValue !== null &&\n        typeof sourceValue === \"object\" &&\n        typeof targetValue === \"object\" &&\n        !Array.isArray(sourceValue) &&\n        !Array.isArray(targetValue)\n      ) {\n        // Recursively merge the nested objects\n        (target as any)[key] = this.deepMerge(targetValue, sourceValue as any);\n      } else {\n        // Otherwise just replace the value\n        (target as any)[key] = sourceValue;\n      }\n    });\n\n    return target;\n  }\n}\n","/**\n * Utilities for applying value transformations\n */\nimport { Configuration } from '../types/types';\nimport { TransformContext, TransformDirection } from './ValueTransformer';\nimport { DOMAdapter } from '../DOMAdapter';\n\n/**\n * Utility for applying value transformations\n */\nexport class TransformUtil {\n  private config: Configuration;\n\n  /**\n   * Create a new TransformUtil\n   * @param config Configuration\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n  }\n\n  /**\n   * Apply transforms to a value\n   * @param value Value to transform\n   * @param context Transformation context\n   * @returns Transformed value\n   */\n  applyTransforms(value: any, context: TransformContext): any {\n    // Skip transformation if no transformers are configured\n    if (!this.config.valueTransforms || this.config.valueTransforms.length === 0) {\n      return value;\n    }\n\n    // Apply each transformer in sequence\n    let transformedValue = value;\n    for (const transformer of this.config.valueTransforms) {\n      transformedValue = transformer.process(transformedValue, context);\n    }\n\n    return transformedValue;\n  }\n\n  /**\n   * Create a transform context\n   * @param direction Direction of transformation\n   * @param nodeName Name of the current node\n   * @param nodeType DOM node type\n   * @param options Additional context options\n   * @returns Transform context\n   */\n  createContext(\n    direction: TransformDirection,\n    nodeName: string,\n    nodeType: number,\n    options: {\n      path?: string;\n      namespace?: string;\n      prefix?: string;\n      isAttribute?: boolean;\n      attributeName?: string;\n      parent?: TransformContext;\n    } = {}\n  ): TransformContext {\n    return {\n      direction,\n      nodeName,\n      nodeType,\n      path: options.path || nodeName,\n      namespace: options.namespace,\n      prefix: options.prefix,\n      isAttribute: options.isAttribute || false,\n      attributeName: options.attributeName,\n      parent: options.parent,\n      config: this.config,\n    };\n  }\n\n  /**\n   * Get a user-friendly node type name for debugging\n   * @param nodeType DOM node type\n   * @returns String representation of node type\n   */\n  getNodeTypeName(nodeType: number): string {\n    return DOMAdapter.getNodeTypeName(nodeType);\n  }\n}","/**\n * XMLToJSON class for converting XML to JSON with consistent namespace handling\n */\nimport { Configuration } from \"./types/types\";\nimport { XJXError } from \"./types/errors\";\nimport { DOMAdapter } from \"./DOMAdapter\";\nimport { JSONUtil } from \"./utils/JsonUtils\";\nimport { TransformUtil } from \"./transforms/TransformUtil\";\nimport { TransformContext } from \"./transforms/ValueTransformer\";\n\n/**\n * XMLToJSON Parser for converting XML to JSON\n */\nexport class XMLToJSON {\n  private config: Configuration;\n  private jsonUtil: JSONUtil;\n  private transformUtil: TransformUtil;\n\n  /**\n   * Constructor for XMLToJSON\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n    this.jsonUtil = new JSONUtil(this.config);\n    this.transformUtil = new TransformUtil(this.config);\n  }\n\n  /**\n   * Convert XML string to JSON\n   * @param xmlString XML content as string\n   * @returns JSON object representing the XML content\n   */\n  public parse(xmlString: string): Record<string, any> {\n    try {\n      const xmlDoc = DOMAdapter.parseFromString(xmlString, \"text/xml\");\n\n      // Check for parsing errors\n      const errors = xmlDoc.getElementsByTagName(\"parsererror\");\n      if (errors.length > 0) {\n        throw new XJXError(`XML parsing error: ${errors[0].textContent}`);\n      }\n\n      return this.nodeToJson(xmlDoc.documentElement);\n    } catch (error) {\n      throw new XJXError(\n        `Failed to convert XML to JSON: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Convert a DOM node to JSON representation\n   * @param node DOM node to convert\n   * @param parentContext Optional parent context for transformation chain\n   * @param path Current path in the XML tree\n   * @returns JSON representation of the node\n   */\n  private nodeToJson(node: Node, parentContext?: TransformContext, path: string = \"\"): Record<string, any> {\n    const result: Record<string, any> = {};\n\n    // Handle element nodes\n    if (node.nodeType === DOMAdapter.nodeTypes.ELEMENT_NODE) {\n      const element = node as Element;\n      // Use localName instead of nodeName to strip namespace prefix\n      const nodeName =\n        element.localName ||\n        element.nodeName.split(\":\").pop() ||\n        element.nodeName;\n\n      // Update the current path\n      const currentPath = path ? `${path}.${nodeName}` : nodeName;\n\n      const nodeObj: Record<string, any> = {};\n\n      // Create context for this node\n      const context = this.transformUtil.createContext(\n        'xml-to-json',\n        nodeName,\n        node.nodeType,\n        {\n          path: currentPath,\n          namespace: element.namespaceURI || undefined,\n          prefix: element.prefix || undefined,\n          parent: parentContext\n        }\n      );\n\n      // Process namespaces if enabled\n      if (this.config.preserveNamespaces) {\n        const ns = element.namespaceURI;\n        if (ns) {\n          nodeObj[this.config.propNames.namespace] = ns;\n        }\n\n        const prefix = element.prefix;\n        if (prefix) {\n          nodeObj[this.config.propNames.prefix] = prefix;\n        }\n      }\n\n      // Process attributes if enabled\n      if (this.config.preserveAttributes && element.attributes.length > 0) {\n        const attrs: Array<Record<string, any>> = [];\n\n        for (let i = 0; i < element.attributes.length; i++) {\n          const attr = element.attributes[i];\n          // Strip namespace prefix from attribute name\n          const attrLocalName =\n            attr.localName || attr.name.split(\":\").pop() || attr.name;\n\n          // Create attribute context\n          const attrContext = this.transformUtil.createContext(\n            'xml-to-json',\n            nodeName,\n            node.nodeType,\n            {\n              path: `${currentPath}.${attrLocalName}`,\n              namespace: attr.namespaceURI || undefined,\n              prefix: attr.prefix || undefined,\n              isAttribute: true,\n              attributeName: attrLocalName,\n              parent: context\n            }\n          );\n\n          // Apply transformations to attribute value\n          const transformedValue = this.transformUtil.applyTransforms(\n            attr.value,\n            attrContext\n          );\n\n          // Create attribute object with consistent structure\n          const attrObj: Record<string, any> = {\n            [attrLocalName]: {\n              [this.config.propNames.value]: transformedValue,\n            },\n          };\n\n          // Add namespace info for attribute if present and enabled\n          if (this.config.preserveNamespaces) {\n            // Handle attribute namespace\n            if (attr.namespaceURI) {\n              attrObj[attrLocalName][this.config.propNames.namespace] =\n                attr.namespaceURI;\n            }\n\n            // Handle attribute prefix\n            if (attr.prefix) {\n              attrObj[attrLocalName][this.config.propNames.prefix] =\n                attr.prefix;\n            }\n          }\n\n          attrs.push(attrObj);\n        }\n\n        if (attrs.length > 0) {\n          nodeObj[this.config.propNames.attributes] = attrs;\n        }\n      }\n\n      // Process child nodes\n      if (element.childNodes.length > 0) {\n        const children: Array<Record<string, any>> = [];\n        const childrenKey = this.config.propNames.children;\n        const valueKey = this.config.propNames.value;\n        const cdataKey = this.config.propNames.cdata;\n        const commentsKey = this.config.propNames.comments;\n        const instructionKey = this.config.propNames.instruction;\n        const targetKey = this.config.propNames.target;\n\n        for (let i = 0; i < element.childNodes.length; i++) {\n          const child = element.childNodes[i];\n\n          // Text nodes - only process if preserveTextNodes is true\n          if (child.nodeType === DOMAdapter.nodeTypes.TEXT_NODE) {\n            if (this.config.preserveTextNodes) {\n              let text = child.nodeValue || \"\";\n\n              // Skip whitespace-only text nodes if whitespace preservation is disabled\n              if (!this.config.preserveWhitespace) {\n                if (text.trim() === \"\") {\n                  continue;\n                }\n                // Trim the text when preserveWhitespace is false\n                text = text.trim();\n              }\n\n              // Create text node context\n              const textContext = this.transformUtil.createContext(\n                'xml-to-json',\n                '#text',\n                child.nodeType,\n                {\n                  path: `${currentPath}.#text`,\n                  parent: context\n                }\n              );\n\n              // Apply transformations to text value\n              const transformedText = this.transformUtil.applyTransforms(\n                text,\n                textContext\n              );\n\n              children.push({ [valueKey]: transformedText });\n            }\n          }\n          // CDATA sections\n          else if (\n            child.nodeType === DOMAdapter.nodeTypes.CDATA_SECTION_NODE &&\n            this.config.preserveCDATA\n          ) {\n            // Create CDATA context\n            const cdataContext = this.transformUtil.createContext(\n              'xml-to-json',\n              '#cdata',\n              child.nodeType,\n              {\n                path: `${currentPath}.#cdata`,\n                parent: context\n              }\n            );\n\n            // Apply transformations to CDATA value\n            const transformedCData = this.transformUtil.applyTransforms(\n              child.nodeValue || \"\",\n              cdataContext\n            );\n\n            children.push({\n              [cdataKey]: transformedCData,\n            });\n          }\n          // Comments\n          else if (\n            child.nodeType === DOMAdapter.nodeTypes.COMMENT_NODE &&\n            this.config.preserveComments\n          ) {\n            children.push({\n              [commentsKey]: child.nodeValue || \"\",\n            });\n          }\n          // Processing instructions\n          else if (\n            child.nodeType ===\n              DOMAdapter.nodeTypes.PROCESSING_INSTRUCTION_NODE &&\n            this.config.preserveProcessingInstr\n          ) {\n            children.push({\n              [instructionKey]: {\n                [targetKey]: child.nodeName,\n                [valueKey]: child.nodeValue || \"\",\n              },\n            });\n          }\n          // Element nodes (recursive)\n          else if (child.nodeType === DOMAdapter.nodeTypes.ELEMENT_NODE) {\n            children.push(this.nodeToJson(child, context, currentPath));\n          }\n        }\n\n        if (children.length > 0) {\n          nodeObj[childrenKey] = children;\n        }\n      }\n\n      // Apply compact option - remove empty properties if enabled\n      if (this.config.outputOptions.compact) {\n        Object.keys(nodeObj).forEach((key) => {\n          const cleaned = this.cleanNode(nodeObj[key]);\n          if (cleaned === undefined) {\n            delete nodeObj[key];\n          } else {\n            nodeObj[key] = cleaned;\n          }\n        });\n      }\n\n      result[nodeName] = nodeObj;\n    }\n\n    return result;\n  }\n\n  private cleanNode(node: any): any {\n    if (Array.isArray(node)) {\n      // Clean each item in the array and filter out empty ones\n      const cleanedArray = node\n        .map((item) => this.cleanNode(item))\n        .filter((item) => {\n          return !(\n            item === null ||\n            item === undefined ||\n            (typeof item === \"object\" && Object.keys(item).length === 0)\n          );\n        });\n      return cleanedArray.length > 0 ? cleanedArray : undefined;\n    } else if (typeof node === \"object\" && node !== null) {\n      // Clean properties recursively\n      Object.keys(node).forEach((key) => {\n        const cleanedChild = this.cleanNode(node[key]);\n        if (\n          cleanedChild === null ||\n          cleanedChild === undefined ||\n          (Array.isArray(cleanedChild) && cleanedChild.length === 0) ||\n          (typeof cleanedChild === \"object\" &&\n            Object.keys(cleanedChild).length === 0)\n        ) {\n          delete node[key];\n        } else {\n          node[key] = cleanedChild;\n        }\n      });\n\n      // Handle the special case for nodes with only empty children/attributes\n      const childrenKey = this.config.propNames.children;\n      const attrsKey = this.config.propNames.attributes;\n      const keys = Object.keys(node);\n      if (\n        keys.every((key) => key === childrenKey || key === attrsKey) &&\n        (node[childrenKey] === undefined ||\n          this.jsonUtil.isEmpty(node[childrenKey])) &&\n        (node[attrsKey] === undefined || this.jsonUtil.isEmpty(node[attrsKey]))\n      ) {\n        return undefined;\n      }\n\n      return Object.keys(node).length > 0 ? node : undefined;\n    }\n\n    return node;\n  }\n}","/**\n * XMLUtil - Utility functions for XML processing\n */\nimport { XJXError } from \"../types/errors\";\nimport { DOMAdapter } from \"../DOMAdapter\";\nimport { Configuration } from \"../types/types\";\n\nexport class XMLUtil {\n  private config: Configuration;\n\n  /**\n   * Constructor for XMLUtil\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n  }\n\n  /**\n   * Pretty print an XML string\n   * @param xmlString XML string to format\n   * @returns Formatted XML string\n   */\n  prettyPrintXml(xmlString: string): string {\n    const indent = this.config.outputOptions.indent;\n    const INDENT = \" \".repeat(indent);\n\n    try {\n      const doc = DOMAdapter.parseFromString(xmlString, \"text/xml\");\n\n      const serializer = (node: Node, level = 0): string => {\n        const pad = INDENT.repeat(level);\n\n        switch (node.nodeType) {\n          case DOMAdapter.nodeTypes.ELEMENT_NODE: {\n            const el = node as Element;\n            const tagName = el.tagName;\n            const attrs = Array.from(el.attributes)\n              .map((a) => `${a.name}=\"${a.value}\"`)\n              .join(\" \");\n            const openTag = attrs ? `<${tagName} ${attrs}>` : `<${tagName}>`;\n\n            const children = Array.from(el.childNodes);\n\n            if (children.length === 0) {\n              return `${pad}${openTag.replace(/>$/, \" />\")}\\n`;\n            }\n\n            // Single text node: print inline\n            if (\n              children.length === 0 ||\n              (children.length === 1 &&\n                children[0].nodeType === DOMAdapter.nodeTypes.TEXT_NODE &&\n                children[0].textContent?.trim() === \"\")\n            ) {\n              // Empty or whitespace-only\n              return `${pad}<${tagName}${attrs ? \" \" + attrs : \"\"}></${tagName}>\\n`;\n            }\n\n            const inner = children\n              .map((child) => serializer(child, level + 1))\n              .join(\"\");\n            return `${pad}${openTag}\\n${inner}${pad}</${tagName}>\\n`;\n          }\n\n          case DOMAdapter.nodeTypes.TEXT_NODE: {\n            const text = node.textContent?.trim();\n            return text ? `${pad}${text}\\n` : \"\";\n          }\n\n          case DOMAdapter.nodeTypes.CDATA_SECTION_NODE:\n            return `${pad}<![CDATA[${node.nodeValue}]]>\\n`;\n\n          case DOMAdapter.nodeTypes.COMMENT_NODE:\n            return `${pad}<!--${node.nodeValue}-->\\n`;\n\n          case DOMAdapter.nodeTypes.PROCESSING_INSTRUCTION_NODE:\n            const pi = node as ProcessingInstruction;\n            return `${pad}<?${pi.target} ${pi.data}?>\\n`;\n\n          case DOMAdapter.nodeTypes.DOCUMENT_NODE:\n            return Array.from(node.childNodes)\n              .map((child) => serializer(child, level))\n              .join(\"\");\n\n          default:\n            return \"\";\n        }\n      };\n\n      return serializer(doc).trim();\n    } catch (error) {\n      throw new XJXError(\n        `Failed to pretty print XML: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Check if XML string is well-formed\n   * @param xmlString XML string to validate\n   * @returns Object with validation result and any error messages\n   */\n  validateXML(xmlString: string): {\n    isValid: boolean;\n    message?: string;\n  } {\n    try {\n      const doc = DOMAdapter.parseFromString(xmlString, \"text/xml\");\n      const errors = doc.getElementsByTagName(\"parsererror\");\n      if (errors.length > 0) {\n        return {\n          isValid: false,\n          message: errors[0].textContent || \"Unknown parsing error\",\n        };\n      }\n      return { isValid: true };\n    } catch (error) {\n      return {\n        isValid: false,\n        message: error instanceof Error ? error.message : String(error),\n      };\n    }\n  }\n\n  /**\n   * Add XML declaration to a string if missing\n   * @param xmlString XML string\n   * @returns XML string with declaration\n   */\n  ensureXMLDeclaration(xmlString: string): string {\n    if (!xmlString.trim().startsWith(\"<?xml\")) {\n      return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n' + xmlString;\n    }\n    return xmlString;\n  }\n\n  /**\n   * Escapes special characters in text for safe XML usage.\n   * @param text Text to escape.\n   * @returns Escaped XML string.\n   */\n  escapeXML(text: string): string {\n    if (typeof text !== \"string\" || text.length === 0) {\n      return \"\";\n    }\n\n    return text.replace(/[&<>\"']/g, (char) => {\n      switch (char) {\n        case \"&\":\n          return \"&amp;\";\n        case \"<\":\n          return \"&lt;\";\n        case \">\":\n          return \"&gt;\";\n        case '\"':\n          return \"&quot;\";\n        case \"'\":\n          return \"&apos;\";\n        default:\n          return char;\n      }\n    });\n  }\n\n  /**\n   * Unescapes XML entities back to their character equivalents.\n   * @param text Text with XML entities.\n   * @returns Unescaped text.\n   */\n  unescapeXML(text: string): string {\n    if (typeof text !== \"string\" || text.length === 0) {\n      return \"\";\n    }\n\n    return text.replace(/&(amp|lt|gt|quot|apos);/g, (match, entity) => {\n      switch (entity) {\n        case \"amp\":\n          return \"&\";\n        case \"lt\":\n          return \"<\";\n        case \"gt\":\n          return \">\";\n        case \"quot\":\n          return '\"';\n        case \"apos\":\n          return \"'\";\n        default:\n          return match;\n      }\n    });\n  }\n\n  /**\n   * Extract the namespace prefix from a qualified name\n   * @param qualifiedName Qualified name (e.g., \"ns:element\")\n   * @returns Prefix or null if no prefix\n   */\n  extractPrefix(qualifiedName: string): string | null {\n    const colonIndex = qualifiedName.indexOf(\":\");\n    return colonIndex > 0 ? qualifiedName.substring(0, colonIndex) : null;\n  }\n\n  /**\n   * Extract the local name from a qualified name\n   * @param qualifiedName Qualified name (e.g., \"ns:element\")\n   * @returns Local name\n   */\n  extractLocalName(qualifiedName: string): string {\n    const colonIndex = qualifiedName.indexOf(\":\");\n    return colonIndex > 0\n      ? qualifiedName.substring(colonIndex + 1)\n      : qualifiedName;\n  }\n\n  /**\n   * Create a qualified name from prefix and local name\n   * @param prefix Namespace prefix (can be null)\n   * @param localName Local name\n   * @returns Qualified name\n   */\n  createQualifiedName(prefix: string | null, localName: string): string {\n    return prefix ? `${prefix}:${localName}` : localName;\n  }\n}","/**\n * JSONToXML class for converting JSON to XML with consistent namespace handling\n */\nimport { Configuration } from \"./types/types\";\nimport { XJXError } from \"./types/errors\";\nimport { DOMAdapter } from \"./DOMAdapter\";\nimport { XMLUtil } from \"./utils/XmlUtils\";\nimport { TransformUtil } from \"./transforms/TransformUtil\";\nimport { TransformContext } from \"./transforms/ValueTransformer\";\n\n/**\n * JSONToXML for converting JSON to XML\n */\nexport class JSONToXML {\n  private config: Configuration;\n  private xmlUtil: XMLUtil;\n  private transformUtil: TransformUtil;\n\n  /**\n   * Constructor for JSONToXML\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n    this.xmlUtil = new XMLUtil(this.config);\n    this.transformUtil = new TransformUtil(this.config);\n  }\n\n  /**\n   * Convert JSON object to XML string\n   * @param jsonObj JSON object to convert\n   * @returns XML string\n   */\n  public serialize(jsonObj: Record<string, any>): string {\n    try {\n      const doc = DOMAdapter.createDocument();\n      const rootElement = this.jsonToNode(jsonObj, doc);\n\n      if (rootElement) {\n        // Handle the temporary root element if it exists\n        if (doc.documentElement && doc.documentElement.nodeName === \"temp\") {\n          doc.replaceChild(rootElement, doc.documentElement);\n        } else {\n          doc.appendChild(rootElement);\n        }\n      }\n\n      // Add XML declaration if specified\n      let xmlString = DOMAdapter.serializeToString(doc);\n\n      // remove xhtml decl inserted by dom\n      xmlString = xmlString.replace(' xmlns=\"http://www.w3.org/1999/xhtml\"', '');\n\n      if (this.config.outputOptions.xml.declaration) {\n        xmlString = this.xmlUtil.ensureXMLDeclaration(xmlString);\n      }\n\n      // Apply pretty printing if enabled\n      if (this.config.outputOptions.prettyPrint) {\n        xmlString = this.xmlUtil.prettyPrintXml(xmlString);\n      }\n\n      return xmlString;\n    } catch (error) {\n      throw new XJXError(\n        `Failed to convert JSON to XML: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Convert JSON object to DOM node\n   * @param jsonObj JSON object to convert\n   * @param doc Document for creating elements\n   * @param parentContext Optional parent context for transformation chain\n   * @param path Current path in the JSON object\n   * @returns DOM Element\n   */\n  private jsonToNode(\n    jsonObj: Record<string, any>,\n    doc: Document,\n    parentContext?: TransformContext,\n    path: string = \"\"\n  ): Element | null {\n    if (!jsonObj || typeof jsonObj !== \"object\") {\n      return null;\n    }\n\n    // Get the node name (first key in the object)\n    const nodeName = Object.keys(jsonObj)[0];\n    if (!nodeName) {\n      return null;\n    }\n\n    const nodeData = jsonObj[nodeName];\n    \n    // Update the current path\n    const currentPath = path ? `${path}.${nodeName}` : nodeName;\n\n    // Create element with namespace if available\n    let element: Element;\n    const namespaceKey = this.config.propNames.namespace;\n    const prefixKey = this.config.propNames.prefix;\n    const ns = nodeData[namespaceKey];\n    const prefix = nodeData[prefixKey];\n\n    // Create context for this node\n    const context = this.transformUtil.createContext(\n      'json-to-xml',\n      nodeName,\n      DOMAdapter.nodeTypes.ELEMENT_NODE,\n      {\n        path: currentPath,\n        namespace: ns,\n        prefix: prefix,\n        parent: parentContext\n      }\n    );\n\n    if (ns && this.config.preserveNamespaces) {\n      if (prefix) {\n        // Create element with namespace and prefix\n        element = DOMAdapter.createElementNS(ns, `${prefix}:${nodeName}`);\n      } else {\n        // Create element with namespace but no prefix\n        element = DOMAdapter.createElementNS(ns, nodeName);\n      }\n    } else {\n      // Create element without namespace\n      element = DOMAdapter.createElement(nodeName);\n    }\n\n    // Process attributes if enabled\n    const attributesKey = this.config.propNames.attributes;\n    const valueKey = this.config.propNames.value;\n    if (\n      this.config.preserveAttributes &&\n      nodeData[attributesKey] &&\n      Array.isArray(nodeData[attributesKey])\n    ) {\n      nodeData[attributesKey].forEach(\n        (attrObj: Record<string, any>) => {\n          const attrName = Object.keys(attrObj)[0];\n          if (!attrName) return;\n\n          const attrData = attrObj[attrName];\n          \n          // Create attribute context\n          const attrContext = this.transformUtil.createContext(\n            'json-to-xml',\n            nodeName,\n            DOMAdapter.nodeTypes.ELEMENT_NODE,\n            {\n              path: `${currentPath}.${attrName}`,\n              namespace: attrData[namespaceKey],\n              prefix: attrData[prefixKey],\n              isAttribute: true,\n              attributeName: attrName,\n              parent: context\n            }\n          );\n          \n          // Apply transformations to attribute value\n          const transformedValue = this.transformUtil.applyTransforms(\n            attrData[valueKey] || \"\",\n            attrContext\n          );\n          \n          const attrNs = attrData[namespaceKey];\n          const attrPrefix = attrData[prefixKey];\n\n          // Form qualified name for attribute if it has a prefix\n          let qualifiedName = attrName;\n          if (attrPrefix && this.config.preserveNamespaces) {\n            qualifiedName = `${attrPrefix}:${attrName}`;\n          }\n\n          DOMAdapter.setNamespacedAttribute(\n            element, \n            (attrNs && this.config.preserveNamespaces) ? attrNs : null, \n            qualifiedName, \n            transformedValue\n          );\n        }\n      );\n    }\n\n    // Process simple text value\n    if (nodeData[valueKey] !== undefined) {\n      // Apply transformations to text value\n      const textContext = this.transformUtil.createContext(\n        'json-to-xml',\n        nodeName,\n        DOMAdapter.nodeTypes.TEXT_NODE,\n        {\n          path: `${currentPath}.#text`,\n          namespace: ns,\n          prefix: prefix,\n          parent: context\n        }\n      );\n      \n      const transformedValue = this.transformUtil.applyTransforms(\n        nodeData[valueKey],\n        textContext\n      );\n      \n      element.textContent = transformedValue;\n    }\n\n    // Process children\n    const childrenKey = this.config.propNames.children;\n    const cdataKey = this.config.propNames.cdata;\n    const commentsKey = this.config.propNames.comments;\n    const instructionKey = this.config.propNames.instruction;\n    const targetKey = this.config.propNames.target;\n\n    if (\n      nodeData[childrenKey] &&\n      Array.isArray(nodeData[childrenKey])\n    ) {\n      nodeData[childrenKey].forEach(\n        (child: Record<string, any>) => {\n          // Text nodes\n          if (\n            child[valueKey] !== undefined &&\n            this.config.preserveTextNodes\n          ) {\n            // Apply transformations to text node\n            const textContext = this.transformUtil.createContext(\n              'json-to-xml',\n              '#text',\n              DOMAdapter.nodeTypes.TEXT_NODE,\n              {\n                path: `${currentPath}.#text`,\n                parent: context\n              }\n            );\n            \n            const transformedText = this.transformUtil.applyTransforms(\n              child[valueKey],\n              textContext\n            );\n            \n            element.appendChild(\n              DOMAdapter.createTextNode(this.xmlUtil.escapeXML(transformedText))\n            );\n          }\n          // CDATA sections\n          else if (\n            child[cdataKey] !== undefined &&\n            this.config.preserveCDATA\n          ) {\n            // Apply transformations to CDATA\n            const cdataContext = this.transformUtil.createContext(\n              'json-to-xml',\n              '#cdata',\n              DOMAdapter.nodeTypes.CDATA_SECTION_NODE,\n              {\n                path: `${currentPath}.#cdata`,\n                parent: context\n              }\n            );\n            \n            const transformedCData = this.transformUtil.applyTransforms(\n              child[cdataKey],\n              cdataContext\n            );\n            \n            element.appendChild(\n              DOMAdapter.createCDATASection(\n                transformedCData\n              )\n            );\n          }\n          // Comments\n          else if (\n            child[commentsKey] !== undefined &&\n            this.config.preserveComments\n          ) {\n            element.appendChild(\n              DOMAdapter.createComment(\n                child[commentsKey]\n              )\n            );\n          }\n          // Processing instructions\n          else if (\n            child[instructionKey] !== undefined &&\n            this.config.preserveProcessingInstr\n          ) {\n            const piData = child[instructionKey];\n            const target = piData[targetKey];\n            const data = piData[valueKey] || \"\";\n\n            if (target) {\n              element.appendChild(\n                DOMAdapter.createProcessingInstruction(target, data)\n              );\n            }\n          }\n          // Element nodes (recursive)\n          else {\n            const childElement = this.jsonToNode(child, doc, context, currentPath);\n            if (childElement) {\n              element.appendChild(childElement);\n            }\n          }\n        }\n      );\n    }\n\n    return element;\n  }\n}","/**\n * Default configuration for the XJX library\n */\nimport { Configuration } from '../types/types';\n\n/**\n * Default configuration\n */\nexport const DEFAULT_CONFIG: Configuration = {\n  preserveNamespaces: true,\n  preserveComments: true,\n  preserveProcessingInstr: true,\n  preserveCDATA: true,\n  preserveTextNodes: true,\n  preserveWhitespace: false,\n  preserveAttributes: true,\n\n  outputOptions: {\n    prettyPrint: true,\n    indent: 2,\n    compact: true,\n    json: {},\n    xml: {\n      declaration: true,\n    },\n  },\n\n  propNames: {\n    namespace: \"$ns\",\n    prefix: \"$pre\",\n    attributes: \"$attr\",\n    value: \"$val\",\n    cdata: \"$cdata\",\n    comments: \"$cmnt\",\n    instruction: \"$pi\", \n    target: \"$trgt\",  \n    children: \"$children\",\n  },\n};","/**\n * XJX - Facade class for XML-JSON conversion operations\n */\nimport { XMLToJSON } from \"./core/XmlToJsonConverter\";\nimport { JSONToXML } from \"./core/JsonToXmlConverter\";\nimport { Configuration } from \"./core/types/types\";\nimport { DEFAULT_CONFIG } from \"./core/config/config\";\nimport { DOMAdapter } from \"./core/DOMAdapter\";\nimport { XMLUtil } from \"./core/utils/XmlUtils\";\nimport { JSONUtil } from \"./core/utils/JsonUtils\";\nimport { ValueTransformer } from \"./core/transforms\";\n\nexport class XJX {\n  private config: Configuration;\n  private xmltojson: XMLToJSON;\n  private jsontoxml: JSONToXML;\n  private jsonUtil: JSONUtil;\n  private xmlUtil: XMLUtil;\n\n  /**\n   * Constructor for XJX utility\n   * @param config Configuration options\n   */\n  constructor(config: Partial<Configuration> = {}) {\n    // First create a jsonUtil instance with default config to use its methods\n    this.jsonUtil = new JSONUtil(DEFAULT_CONFIG);\n\n    // Create a deep clone of the default config\n    const defaultClone = this.jsonUtil.deepClone(DEFAULT_CONFIG);\n\n    // Deep merge with the provided config\n    this.config = this.jsonUtil.deepMerge<Configuration>(defaultClone, config);\n\n    // Re-initialize jsonUtil with the merged config\n    this.jsonUtil = new JSONUtil(this.config);\n\n    // Initialize other components\n    this.xmlUtil = new XMLUtil(this.config);\n    this.xmltojson = new XMLToJSON(this.config);\n    this.jsontoxml = new JSONToXML(this.config);\n  }\n\n  /**\n   * Convert XML string to JSON\n   * @param xmlString XML content as string\n   * @returns JSON object representing the XML content\n   */\n  public xmlToJson(xmlString: string): Record<string, any> {\n    return this.xmltojson.parse(xmlString);\n  }\n\n  /**\n   * Convert JSON object back to XML string\n   * @param jsonObj JSON object to convert\n   * @returns XML string\n   */\n  public jsonToXml(jsonObj: Record<string, any>): string {\n    return this.jsontoxml.serialize(jsonObj);\n  }\n\n  /**\n   * Pretty print an XML string\n   * @param xmlString XML string to format\n   * @returns Formatted XML string\n   */\n  public prettyPrintXml(xmlString: string): string {\n    return this.xmlUtil.prettyPrintXml(xmlString);\n  }\n\n  /**\n   * Safely retrieves a value from a JSON object using a dot-separated path.\n   * @param obj The input JSON object\n   * @param path The dot-separated path string (e.g., \"root.item.description.$val\")\n   * @param fallback Value to return if the path does not resolve\n   * @returns The value at the specified path or the fallback value\n   */\n  public getPath(\n    obj: Record<string, any>,\n    path: string,\n    fallback: any = undefined\n  ): any {\n    return this.jsonUtil.getPath(obj, path, fallback);\n  }\n\n  /**\n   * Validate XML string\n   * @param xmlString XML string to validate\n   * @returns Validation result\n   */\n  public validateXML(xmlString: string): {\n    isValid: boolean;\n    message?: string;\n  } {\n    return this.xmlUtil.validateXML(xmlString);\n  }\n\n  /**\n   * Add a value transformer to the configuration\n   * @param transformer Value transformer to add\n   * @returns This XJX instance for chaining\n   */\n  public addTransformer(transformer: ValueTransformer): XJX {\n    if (!this.config.valueTransforms) {\n      this.config.valueTransforms = [];\n    }\n    this.config.valueTransforms.push(transformer);\n    return this;\n  }\n\n  /**\n   * Removes all value transformers from the configuration\n   * @returns This XJX instance for chaining\n   */\n  public clearTransformers(): XJX {\n    this.config.valueTransforms = [];\n    return this;\n  }\n\n  /**\n   * Clean up any resources\n   */\n  public cleanup(): void {\n    DOMAdapter.cleanup();\n  }\n}","/**\n * Value transformation types and base class for the XJX library\n */\nimport { Configuration } from '../types/types';\n\n/**\n * Direction of the transformation\n */\nexport type TransformDirection = 'xml-to-json' | 'json-to-xml';\n\n/**\n * Context provided to value transformers\n */\nexport interface TransformContext {\n  // Core transformation info\n  direction: TransformDirection;  // Direction of the current transformation\n  \n  // Node information\n  nodeName: string;              // Name of the current node\n  nodeType: number;              // DOM node type (element, text, etc.)\n  namespace?: string;            // Namespace URI if available\n  prefix?: string;               // Namespace prefix if available\n  \n  // Structure information\n  path: string;                  // Dot-notation path to current node\n  isAttribute: boolean;          // Whether the current value is from an attribute\n  attributeName?: string;        // Name of attribute if isAttribute is true\n  \n  // Parent context (creates a chain)\n  parent?: TransformContext;     // Reference to parent context for traversal\n  \n  // Configuration reference\n  config: Configuration;         // Reference to the current configuration\n}\n\n/**\n * Abstract base class for value transformers\n */\nexport abstract class ValueTransformer {\n  /**\n   * Process a value, transforming it if applicable\n   * @param value Value to potentially transform\n   * @param context Context including direction and other information\n   * @returns Transformed value or original if not applicable\n   */\n  process(value: any, context: TransformContext): any {\n    if (context.direction === 'xml-to-json') {\n      return this.xmlToJson(value, context);\n    } else {\n      return this.jsonToXml(value, context);\n    }\n  }\n\n  /**\n   * Transform a value from XML to JSON representation\n   * @param value Value from XML\n   * @param context Transformation context\n   * @returns Transformed value for JSON\n   */\n  protected xmlToJson(value: any, context: TransformContext): any {\n    // Default implementation returns original value\n    return value;\n  }\n\n  /**\n   * Transform a value from JSON to XML representation\n   * @param value Value from JSON\n   * @param context Transformation context\n   * @returns Transformed value for XML\n   */\n  protected jsonToXml(value: any, context: TransformContext): any {\n    // Default implementation returns original value\n    return value;\n  }\n}"],"names":["XJXError","Error","constructor","message","super","this","name","DOMAdapter","domParser","xmlSerializer","nodeTypes","docImplementation","jsdomInstance","window","JSDOM","require","contentType","DOMParser","XMLSerializer","ELEMENT_NODE","Node","TEXT_NODE","CDATA_SECTION_NODE","COMMENT_NODE","PROCESSING_INSTRUCTION_NODE","DOCUMENT_NODE","document","implementation","jsdomError","DOMImplementation","xmldomError","error","String","createParser","createSerializer","parseFromString","xmlString","serializeToString","node","createDocument","createElement","tagName","createElementNS","namespaceURI","qualifiedName","createTextNode","data","createCDATASection","createComment","createProcessingInstruction","target","setNamespacedAttribute","element","value","setAttributeNS","setAttribute","isNode","obj","nodeType","getNodeTypeName","getNodeAttributes","result","i","attributes","length","attr","cleanup","close","JSONUtil","config","getPath","path","fallback","undefined","segments","split","current","segment","Array","isArray","results","map","item","resolveSegment","flat","filter","v","propNames","children","namespace","prefix","cdata","comments","instruction","configKey","Object","entries","find","_","matches","child","fromJSONObject","root","wrappedObject","wrapObject","elementName","attrsKey","childrenKey","nsKey","valKey","key","val","isEmpty","keys","safeStringify","indent","JSON","stringify","deepClone","parse","deepMerge","source","forEach","sourceValue","targetValue","TransformUtil","applyTransforms","context","valueTransforms","transformedValue","transformer","process","createContext","direction","nodeName","options","isAttribute","attributeName","parent","XMLToJSON","jsonUtil","transformUtil","xmlDoc","errors","getElementsByTagName","textContent","nodeToJson","documentElement","parentContext","localName","pop","currentPath","nodeObj","preserveNamespaces","ns","preserveAttributes","attrs","attrLocalName","attrContext","attrObj","push","childNodes","valueKey","cdataKey","commentsKey","instructionKey","targetKey","preserveTextNodes","text","nodeValue","preserveWhitespace","trim","textContext","transformedText","preserveCDATA","cdataContext","transformedCData","preserveComments","preserveProcessingInstr","outputOptions","compact","cleaned","cleanNode","cleanedArray","cleanedChild","every","XMLUtil","prettyPrintXml","INDENT","repeat","doc","serializer","level","pad","el","from","a","join","openTag","replace","pi","validateXML","isValid","ensureXMLDeclaration","startsWith","escapeXML","char","unescapeXML","match","entity","extractPrefix","colonIndex","indexOf","substring","extractLocalName","createQualifiedName","JSONToXML","xmlUtil","serialize","jsonObj","rootElement","jsonToNode","replaceChild","appendChild","xml","declaration","prettyPrint","nodeData","namespaceKey","prefixKey","attributesKey","attrName","attrData","attrNs","attrPrefix","piData","childElement","DEFAULT_CONFIG","json","XJX","defaultClone","xmltojson","jsontoxml","xmlToJson","jsonToXml","addTransformer","clearTransformers"],"mappings":"iCAOM,MAAOA,UAAiBC,MAC5B,WAAAC,CAAYC,GACVC,MAAMD,GACNE,KAAKC,KAAO,gBACb,ECsBI,MAAMC,EAAa,MAExB,IAAIC,EACAC,EACAC,EACAC,EACAC,EAAsC,KAE1C,IACE,GAAsB,oBAAXC,OAET,IACE,MAAMC,MAAEA,GAAUC,QAAQ,SAC1BH,EAAgB,IAAIE,EAAM,4CAA6C,CACrEE,YAAa,aAGfR,EAAYI,EAAcC,OAAOI,UACjCR,EAAgBG,EAAcC,OAAOK,cACrCR,EAAY,CACVS,aAAcP,EAAcC,OAAOO,KAAKD,aACxCE,UAAWT,EAAcC,OAAOO,KAAKC,UACrCC,mBAAoBV,EAAcC,OAAOO,KAAKE,mBAC9CC,aAAcX,EAAcC,OAAOO,KAAKG,aACxCC,4BAA6BZ,EAAcC,OAAOO,KAAKI,4BACvDC,cAAeb,EAAcC,OAAOO,KAAKK,eAE3Cd,EAAoBC,EAAcC,OAAOa,SAASC,cACnD,CAAC,MAAOC,GAEP,IACE,MAAMX,UAAEA,EAASC,cAAEA,EAAaW,kBAAEA,GAAsBd,QAAQ,kBAChEP,EAAYS,EACZR,EAAgBS,EAEhBR,EAAY,CACVS,aAAc,EACdE,UAAW,EACXC,mBAAoB,EACpBC,aAAc,EACdC,4BAA6B,EAC7BC,cAAe,GAEjB,MAAME,EAAiB,IAAIE,EAC3BlB,EAAoBgB,CACrB,CAAC,MAAOG,GACP,MAAM,IAAI9B,EAAS,uFACpB,CACF,KACI,CAEL,IAAKa,OAAOI,UACV,MAAM,IAAIjB,EAAS,kDAGrB,IAAKa,OAAOK,cACV,MAAM,IAAIlB,EAAS,sDAGrBQ,EAAYK,OAAOI,UACnBR,EAAgBI,OAAOK,cACvBR,EAAY,CACVS,aAAcC,KAAKD,aACnBE,UAAWD,KAAKC,UAChBC,mBAAoBF,KAAKE,mBACzBC,aAAcH,KAAKG,aACnBC,4BAA6BJ,KAAKI,4BAClCC,cAAeL,KAAKK,eAEtBd,EAAoBe,SAASC,cAC9B,CACF,CAAC,MAAOI,GACP,MAAM,IAAI/B,EAAS,0CAA0C+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KAC9G,CAED,MAAO,CACLE,aAAc,KACZ,IACE,OAAO,IAAIzB,CACZ,CAAC,MAAOuB,GACP,MAAM,IAAI/B,EAAS,gCAAgC+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KACpG,GAGHG,iBAAkB,KAChB,IACE,OAAO,IAAIzB,CACZ,CAAC,MAAOsB,GACP,MAAM,IAAI/B,EAAS,oCAAoC+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KACxG,GAGHrB,YAEAyB,gBAAiB,CAACC,EAAmBpB,EAAsB,cACzD,IAEE,OADe,IAAIR,GACL2B,gBAAgBC,EAAWpB,EAC1C,CAAC,MAAOe,GACP,MAAM,IAAI/B,EAAS,wBAAwB+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KAC5F,GAGHM,kBAAoBC,IAClB,IAEE,OADmB,IAAI7B,GACL4B,kBAAkBC,EACrC,CAAC,MAAOP,GACP,MAAM,IAAI/B,EAAS,4BAA4B+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KAChG,GAGHQ,eAAgB,KACd,IAEE,GAAsB,oBAAX1B,OAAwB,CAEjC,OADe,IAAIL,GACL2B,gBAAgB,gBAAiB,WAChD,CACC,OAAOxB,EAAkB4B,eAAe,KAAM,KAAM,KAEvD,CAAC,MAAOR,GACP,MAAM,IAAI/B,EAAS,8BAA8B+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KAClG,GAGHS,cAAgBC,IACd,IACE,GAAsB,oBAAX5B,OACT,OAAOa,SAASc,cAAcC,GAG9B,OADY9B,EAAkB4B,eAAe,KAAM,KAAM,MAC9CC,cAAcC,EAE5B,CAAC,MAAOV,GACP,MAAM,IAAI/B,EAAS,6BAA6B+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KACjG,GAGHW,gBAAiB,CAACC,EAAsBC,KACtC,IACE,GAAsB,oBAAX/B,OACT,OAAOa,SAASgB,gBAAgBC,EAAcC,GAG9C,OADYjC,EAAkB4B,eAAe,KAAM,KAAM,MAC9CG,gBAAgBC,EAAcC,EAE5C,CAAC,MAAOb,GACP,MAAM,IAAI/B,EAAS,4CAA4C+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KAChH,GAGHc,eAAiBC,IACf,IACE,GAAsB,oBAAXjC,OACT,OAAOa,SAASmB,eAAeC,GAG/B,OADYnC,EAAkB4B,eAAe,KAAM,KAAM,MAC9CM,eAAeC,EAE7B,CAAC,MAAOf,GACP,MAAM,IAAI/B,EAAS,+BAA+B+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KACnG,GAGHgB,mBAAqBD,IACnB,IAEE,GAAsB,oBAAXjC,OAAwB,CAEjC,OADYa,SAASC,eAAeY,eAAe,KAAM,KAAM,MACpDQ,mBAAmBD,EAC/B,CAEC,OADYnC,EAAkB4B,eAAe,KAAM,KAAM,MAC9CQ,mBAAmBD,EAEjC,CAAC,MAAOf,GACP,MAAM,IAAI/B,EAAS,mCAAmC+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KACvG,GAGHiB,cAAgBF,IACd,IACE,GAAsB,oBAAXjC,OACT,OAAOa,SAASsB,cAAcF,GAG9B,OADYnC,EAAkB4B,eAAe,KAAM,KAAM,MAC9CS,cAAcF,EAE5B,CAAC,MAAOf,GACP,MAAM,IAAI/B,EAAS,6BAA6B+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KACjG,GAGHkB,4BAA6B,CAACC,EAAgBJ,KAC5C,IACE,GAAsB,oBAAXjC,OAAwB,CAEjC,OADYa,SAASC,eAAeY,eAAe,KAAM,KAAM,MACpDU,4BAA4BC,EAAQJ,EAChD,CAEC,OADYnC,EAAkB4B,eAAe,KAAM,KAAM,MAC9CU,4BAA4BC,EAAQJ,EAElD,CAAC,MAAOf,GACP,MAAM,IAAI/B,EAAS,4CAA4C+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KAChH,GAQHoB,uBAAwB,CAACC,EAAkBT,EAA6BC,EAAuBS,KAC7F,IACMV,EACFS,EAAQE,eAAeX,EAAcC,EAAeS,GAEpDD,EAAQG,aAAaX,EAAeS,EAEvC,CAAC,MAAOtB,GACP,MAAM,IAAI/B,EAAS,4BAA4B+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KAChG,GAMHyB,OAASC,IACP,IACE,OAAOA,GAAsB,iBAARA,GAA4C,iBAAjBA,EAAIC,QACrD,CAAC,MAAO3B,GACP,OAAO,CACR,GAMH4B,gBAAkBD,IAChB,OAAQA,GACN,KAAKhD,EAAUS,aAAc,MAAO,eACpC,KAAKT,EAAUW,UAAW,MAAO,YACjC,KAAKX,EAAUY,mBAAoB,MAAO,qBAC1C,KAAKZ,EAAUa,aAAc,MAAO,eACpC,KAAKb,EAAUc,4BAA6B,MAAO,8BACnD,QAAS,MAAO,qBAAqBkC,KACtC,EAMHE,kBAAoBtB,IAClB,MAAMuB,EAAiC,CAAA,EACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIxB,EAAKyB,WAAWC,OAAQF,IAAK,CAC/C,MAAMG,EAAO3B,EAAKyB,WAAWD,GAC7BD,EAAOI,EAAK3D,MAAQ2D,EAAKZ,KAC1B,CACD,OAAOQ,CAAM,EAIfK,QAAS,KACHtD,GAAuD,mBAA/BA,EAAcC,OAAOsD,OAC/CvD,EAAcC,OAAOsD,OACtB,EAGN,EA5QyB,SC5BbC,EAOX,WAAAlE,CAAYmE,GACVhE,KAAKgE,OAASA,CACf,CAWD,OAAAC,CACEb,EACAc,EACAC,OAAgBC,GAEhB,MAAMC,EAAWH,EAAKI,MAAM,KAC5B,IAAIC,EAAenB,EAEnB,IAAK,MAAMoB,KAAWH,EAAU,CAC9B,GAAII,MAAMC,QAAQH,GAAU,CAE1B,MAAMI,EAAUJ,EACbK,KAAKC,GAAS7E,KAAK8E,eAAeD,EAAML,KACxCO,OACAC,QAAQC,QAAYb,IAANa,IACjBV,EAAUI,EAAQhB,OAAS,EAAIgB,OAAUP,CAC1C,MACCG,EAAUvE,KAAK8E,eAAeP,EAASC,GAGzC,QAAgBJ,IAAZG,EAAuB,OAAOJ,CACnC,CAGD,OAAIM,MAAMC,QAAQH,IAA+B,IAAnBA,EAAQZ,OAC7BY,EAAQ,QAGEH,IAAZG,EAAwBA,EAAUJ,CAC1C,CAUO,cAAAW,CAAe1B,EAAUoB,GAC/B,GAAW,MAAPpB,GAA8B,iBAARA,EAAkB,OAG5C,GAAIoB,KAAWpB,EACb,OAAOA,EAAIoB,GAIb,GACEA,IAAYxE,KAAKgE,OAAOkB,UAAUlC,OAClCwB,IAAYxE,KAAKgE,OAAOkB,UAAUC,UAClCX,IAAYxE,KAAKgE,OAAOkB,UAAUxB,YAClCc,IAAYxE,KAAKgE,OAAOkB,UAAUE,WAClCZ,IAAYxE,KAAKgE,OAAOkB,UAAUG,QAClCb,IAAYxE,KAAKgE,OAAOkB,UAAUI,OAClCd,IAAYxE,KAAKgE,OAAOkB,UAAUK,UAClCf,IAAYxE,KAAKgE,OAAOkB,UAAUM,aAClChB,IAAYxE,KAAKgE,OAAOkB,UAAUrC,OAClC,CACA,MAAM4C,EAAYC,OAAOC,QAAQ3F,KAAKgE,OAAOkB,WAAWU,MACtD,EAAEC,EAAG7C,KAAWA,IAAUwB,MACxB,GAEJ,GAAIiB,QAA8BrB,IAAjBhB,EAAIoB,GACnB,OAAOpB,EAAIoB,EAEd,CAGD,MACMW,EAAW/B,EADGpD,KAAKgE,OAAOkB,UAAUC,UAE1C,GAAIV,MAAMC,QAAQS,GAAW,CAC3B,MAAMW,EAAUX,EACbP,KAAKmB,GAAWvB,KAAWuB,EAAQA,EAAMvB,QAAWJ,IACpDY,QAAQC,QAAYb,IAANa,IACjB,OAAOa,EAAQnC,OAAS,EAAImC,OAAU1B,CACvC,CAGF,CAUD,cAAA4B,CAAe5C,EAAU6C,GACvB,MAAMC,EAAgBlG,KAAKmG,WAAW/C,GAEtC,GAAoB,iBAAT6C,EAET,MAAO,CAAEA,CAACA,GAAOC,GAGnB,GAAID,GAAwB,iBAATA,EAAmB,CAEpC,MAAMG,EAAcH,EAAKhG,MAAQ,OAC3BoF,EAASY,EAAKjG,KAAKgE,OAAOkB,UAAUG,SAAW,GAC/C9C,EAAgB8C,EAAS,GAAGA,KAAUe,IAAgBA,EAEtD5C,EAAc,CAClBjB,CAACA,GAAgB,CAAE,GAIf8D,EAAWrG,KAAKgE,OAAOkB,UAAUxB,WACnCuC,EAAKI,IAAa5B,MAAMC,QAAQuB,EAAKI,MACvC7C,EAAOjB,GAAe8D,GAAYJ,EAAKI,IAIzC,MAAMC,EAActG,KAAKgE,OAAOkB,UAAUC,SACpCA,EAAWc,EAAKK,GAAeL,EAAKK,GAAe,GACzD9C,EAAOjB,GAAe+D,GAAe,IAChCnB,EACH,CAAEiB,CAACA,GAAcF,IAInB,MAAMK,EAAQvG,KAAKgE,OAAOkB,UAAUE,UASpC,OARIa,EAAKM,KACP/C,EAAOjB,GAAegE,GAASN,EAAKM,IAGlClB,GAAUY,EAAKM,KACjB/C,EAAOjB,GAAe,SAAS8C,KAAYY,EAAKM,IAG3C/C,CACR,CAGD,OAAO0C,CACR,CAOO,UAAAC,CAAWnD,GACjB,MAAMwD,EAASxG,KAAKgE,OAAOkB,UAAUlC,MAC/BsD,EAActG,KAAKgE,OAAOkB,UAAUC,SAE1C,GACY,OAAVnC,GACiB,iBAAVA,GACU,iBAAVA,GACU,kBAAVA,EAEP,MAAO,CAAEwD,CAACA,GAASxD,GAGrB,GAAIyB,MAAMC,QAAQ1B,GAEhB,MAAO,CACLsD,CAACA,GAActD,EAAM4B,KAAKC,GACjB7E,KAAKmG,WAAWtB,MAK7B,GAAqB,iBAAV7B,EAAoB,CAE7B,MAAMmC,EAAWO,OAAOC,QAAQ3C,GAAO4B,KAAI,EAAE6B,EAAKC,MAAU,CAC1DD,CAACA,GAAMzG,KAAKmG,WAAWO,OAGzB,MAAO,CAAEJ,CAACA,GAAcnB,EACzB,CAGF,CAOD,OAAAwB,CAAQ3D,GACN,OAAa,MAATA,IACAyB,MAAMC,QAAQ1B,GAAgC,IAAjBA,EAAMW,OAClB,iBAAVX,GAAyD,IAA9B0C,OAAOkB,KAAK5D,GAAOW,OAE1D,CAQD,aAAAkD,CAAczD,EAAU0D,EAAiB,GACvC,IACE,OAAOC,KAAKC,UAAU5D,EAAK,KAAM0D,EAClC,CAAC,MAAOpF,GACP,MAAO,2BACR,CACF,CAOD,SAAAuF,CAAU7D,GACR,IACE,OAAO2D,KAAKG,MAAMH,KAAKC,UAAU5D,GAClC,CAAC,MAAO1B,GACP,MAAM,IAAI9B,MACR,gCACE8B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KAGrD,CACF,CAQD,SAAAyF,CAAatE,EAAWuE,GACtB,OAAKA,GAA4B,iBAAXA,GAAkC,OAAXA,EAIxCvE,GAA4B,iBAAXA,GAAkC,OAAXA,GAI7C6C,OAAOkB,KAAKQ,GAAQC,SAASZ,IAC3B,MAAMa,EAAcF,EAAOX,GACrBc,EAAc1E,EAAO4D,GAIT,OAAhBa,GACgB,OAAhBC,GACuB,iBAAhBD,GACgB,iBAAhBC,GACN9C,MAAMC,QAAQ4C,IACd7C,MAAMC,QAAQ6C,GAMd1E,EAAe4D,GAAOa,EAHtBzE,EAAe4D,GAAOzG,KAAKmH,UAAUI,EAAaD,EAIpD,IAGIzE,GAxBEuE,EAJAvE,CA6BV,QChRU2E,EAOX,WAAA3H,CAAYmE,GACVhE,KAAKgE,OAASA,CACf,CAQD,eAAAyD,CAAgBzE,EAAY0E,GAE1B,IAAK1H,KAAKgE,OAAO2D,iBAA0D,IAAvC3H,KAAKgE,OAAO2D,gBAAgBhE,OAC9D,OAAOX,EAIT,IAAI4E,EAAmB5E,EACvB,IAAK,MAAM6E,KAAe7H,KAAKgE,OAAO2D,gBACpCC,EAAmBC,EAAYC,QAAQF,EAAkBF,GAG3D,OAAOE,CACR,CAUD,aAAAG,CACEC,EACAC,EACA5E,EACA6E,EAOI,CAAA,GAEJ,MAAO,CACLF,YACAC,WACA5E,WACAa,KAAMgE,EAAQhE,MAAQ+D,EACtB7C,UAAW8C,EAAQ9C,UACnBC,OAAQ6C,EAAQ7C,OAChB8C,YAAaD,EAAQC,cAAe,EACpCC,cAAeF,EAAQE,cACvBC,OAAQH,EAAQG,OAChBrE,OAAQhE,KAAKgE,OAEhB,CAOD,eAAAV,CAAgBD,GACd,OAAOnD,EAAWoD,gBAAgBD,EACnC,QCvEUiF,EASX,WAAAzI,CAAYmE,GACVhE,KAAKgE,OAASA,EACdhE,KAAKuI,SAAW,IAAIxE,EAAS/D,KAAKgE,QAClChE,KAAKwI,cAAgB,IAAIhB,EAAcxH,KAAKgE,OAC7C,CAOM,KAAAkD,CAAMnF,GACX,IACE,MAAM0G,EAASvI,EAAW4B,gBAAgBC,EAAW,YAG/C2G,EAASD,EAAOE,qBAAqB,eAC3C,GAAID,EAAO/E,OAAS,EAClB,MAAM,IAAIhE,EAAS,sBAAsB+I,EAAO,GAAGE,eAGrD,OAAO5I,KAAK6I,WAAWJ,EAAOK,gBAC/B,CAAC,MAAOpH,GACP,MAAM,IAAI/B,EACR,kCACE+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KAGrD,CACF,CASO,UAAAmH,CAAW5G,EAAY8G,EAAkC7E,EAAe,IAC9E,MAAMV,EAA8B,CAAA,EAGpC,GAAIvB,EAAKoB,WAAanD,EAAWG,UAAUS,aAAc,CACvD,MAAMiC,EAAUd,EAEVgG,EACJlF,EAAQiG,WACRjG,EAAQkF,SAAS3D,MAAM,KAAK2E,OAC5BlG,EAAQkF,SAGJiB,EAAchF,EAAO,GAAGA,KAAQ+D,IAAaA,EAE7CkB,EAA+B,CAAA,EAG/BzB,EAAU1H,KAAKwI,cAAcT,cACjC,cACAE,EACAhG,EAAKoB,SACL,CACEa,KAAMgF,EACN9D,UAAWrC,EAAQT,mBAAgB8B,EACnCiB,OAAQtC,EAAQsC,aAAUjB,EAC1BiE,OAAQU,IAKZ,GAAI/I,KAAKgE,OAAOoF,mBAAoB,CAClC,MAAMC,EAAKtG,EAAQT,aACf+G,IACFF,EAAQnJ,KAAKgE,OAAOkB,UAAUE,WAAaiE,GAG7C,MAAMhE,EAAStC,EAAQsC,OACnBA,IACF8D,EAAQnJ,KAAKgE,OAAOkB,UAAUG,QAAUA,EAE3C,CAGD,GAAIrF,KAAKgE,OAAOsF,oBAAsBvG,EAAQW,WAAWC,OAAS,EAAG,CACnE,MAAM4F,EAAoC,GAE1C,IAAK,IAAI9F,EAAI,EAAGA,EAAIV,EAAQW,WAAWC,OAAQF,IAAK,CAClD,MAAMG,EAAOb,EAAQW,WAAWD,GAE1B+F,EACJ5F,EAAKoF,WAAapF,EAAK3D,KAAKqE,MAAM,KAAK2E,OAASrF,EAAK3D,KAGjDwJ,EAAczJ,KAAKwI,cAAcT,cACrC,cACAE,EACAhG,EAAKoB,SACL,CACEa,KAAM,GAAGgF,KAAeM,IACxBpE,UAAWxB,EAAKtB,mBAAgB8B,EAChCiB,OAAQzB,EAAKyB,aAAUjB,EACvB+D,aAAa,EACbC,cAAeoB,EACfnB,OAAQX,IAKNE,EAAmB5H,KAAKwI,cAAcf,gBAC1C7D,EAAKZ,MACLyG,GAIIC,EAA+B,CACnCF,CAACA,GAAgB,CACf,CAACxJ,KAAKgE,OAAOkB,UAAUlC,OAAQ4E,IAK/B5H,KAAKgE,OAAOoF,qBAEVxF,EAAKtB,eACPoH,EAAQF,GAAexJ,KAAKgE,OAAOkB,UAAUE,WAC3CxB,EAAKtB,cAILsB,EAAKyB,SACPqE,EAAQF,GAAexJ,KAAKgE,OAAOkB,UAAUG,QAC3CzB,EAAKyB,SAIXkE,EAAMI,KAAKD,EACZ,CAEGH,EAAM5F,OAAS,IACjBwF,EAAQnJ,KAAKgE,OAAOkB,UAAUxB,YAAc6F,EAE/C,CAGD,GAAIxG,EAAQ6G,WAAWjG,OAAS,EAAG,CACjC,MAAMwB,EAAuC,GACvCmB,EAActG,KAAKgE,OAAOkB,UAAUC,SACpC0E,EAAW7J,KAAKgE,OAAOkB,UAAUlC,MACjC8G,EAAW9J,KAAKgE,OAAOkB,UAAUI,MACjCyE,EAAc/J,KAAKgE,OAAOkB,UAAUK,SACpCyE,EAAiBhK,KAAKgE,OAAOkB,UAAUM,YACvCyE,EAAYjK,KAAKgE,OAAOkB,UAAUrC,OAExC,IAAK,IAAIY,EAAI,EAAGA,EAAIV,EAAQ6G,WAAWjG,OAAQF,IAAK,CAClD,MAAMsC,EAAQhD,EAAQ6G,WAAWnG,GAGjC,GAAIsC,EAAM1C,WAAanD,EAAWG,UAAUW,WAC1C,GAAIhB,KAAKgE,OAAOkG,kBAAmB,CACjC,IAAIC,EAAOpE,EAAMqE,WAAa,GAG9B,IAAKpK,KAAKgE,OAAOqG,mBAAoB,CACnC,GAAoB,KAAhBF,EAAKG,OACP,SAGFH,EAAOA,EAAKG,MACb,CAGD,MAAMC,EAAcvK,KAAKwI,cAAcT,cACrC,cACA,QACAhC,EAAM1C,SACN,CACEa,KAAM,GAAGgF,UACTb,OAAQX,IAKN8C,EAAkBxK,KAAKwI,cAAcf,gBACzC0C,EACAI,GAGFpF,EAASwE,KAAK,CAAEE,CAACA,GAAWW,GAC7B,OAGE,GACHzE,EAAM1C,WAAanD,EAAWG,UAAUY,oBACxCjB,KAAKgE,OAAOyG,cACZ,CAEA,MAAMC,EAAe1K,KAAKwI,cAAcT,cACtC,cACA,SACAhC,EAAM1C,SACN,CACEa,KAAM,GAAGgF,WACTb,OAAQX,IAKNiD,EAAmB3K,KAAKwI,cAAcf,gBAC1C1B,EAAMqE,WAAa,GACnBM,GAGFvF,EAASwE,KAAK,CACZG,CAACA,GAAWa,GAEf,MAGC5E,EAAM1C,WAAanD,EAAWG,UAAUa,cACxClB,KAAKgE,OAAO4G,iBAEZzF,EAASwE,KAAK,CACZI,CAACA,GAAchE,EAAMqE,WAAa,KAKpCrE,EAAM1C,WACJnD,EAAWG,UAAUc,6BACvBnB,KAAKgE,OAAO6G,wBAEZ1F,EAASwE,KAAK,CACZK,CAACA,GAAiB,CAChBC,CAACA,GAAYlE,EAAMkC,SACnB4B,CAACA,GAAW9D,EAAMqE,WAAa,MAK5BrE,EAAM1C,WAAanD,EAAWG,UAAUS,cAC/CqE,EAASwE,KAAK3J,KAAK6I,WAAW9C,EAAO2B,EAASwB,GAEjD,CAEG/D,EAASxB,OAAS,IACpBwF,EAAQ7C,GAAenB,EAE1B,CAGGnF,KAAKgE,OAAO8G,cAAcC,SAC5BrF,OAAOkB,KAAKuC,GAAS9B,SAASZ,IAC5B,MAAMuE,EAAUhL,KAAKiL,UAAU9B,EAAQ1C,SACvBrC,IAAZ4G,SACK7B,EAAQ1C,GAEf0C,EAAQ1C,GAAOuE,CAChB,IAILxH,EAAOyE,GAAYkB,CACpB,CAED,OAAO3F,CACR,CAEO,SAAAyH,CAAUhJ,GAChB,GAAIwC,MAAMC,QAAQzC,GAAO,CAEvB,MAAMiJ,EAAejJ,EAClB2C,KAAKC,GAAS7E,KAAKiL,UAAUpG,KAC7BG,QAAQH,KAELA,SAEiB,iBAATA,GAAkD,IAA7Ba,OAAOkB,KAAK/B,GAAMlB,UAGrD,OAAOuH,EAAavH,OAAS,EAAIuH,OAAe9G,CACjD,CAAM,GAAoB,iBAATnC,GAA8B,OAATA,EAAe,CAEpDyD,OAAOkB,KAAK3E,GAAMoF,SAASZ,IACzB,MAAM0E,EAAenL,KAAKiL,UAAUhJ,EAAKwE,IAEvC0E,SAEC1G,MAAMC,QAAQyG,IAAyC,IAAxBA,EAAaxH,QACpB,iBAAjBwH,GAC+B,IAArCzF,OAAOkB,KAAKuE,GAAcxH,cAErB1B,EAAKwE,GAEZxE,EAAKwE,GAAO0E,CACb,IAIH,MAAM7E,EAActG,KAAKgE,OAAOkB,UAAUC,SACpCkB,EAAWrG,KAAKgE,OAAOkB,UAAUxB,WAEvC,GADagC,OAAOkB,KAAK3E,GAElBmJ,OAAO3E,GAAQA,IAAQH,GAAeG,IAAQJ,WAC5BjC,IAAtBnC,EAAKqE,IACJtG,KAAKuI,SAAS5B,QAAQ1E,EAAKqE,YACTlC,IAAnBnC,EAAKoE,IAA2BrG,KAAKuI,SAAS5B,QAAQ1E,EAAKoE,KAE5D,OAGF,OAAOX,OAAOkB,KAAK3E,GAAM0B,OAAS,EAAI1B,OAAOmC,CAC9C,CAED,OAAOnC,CACR,QCxUUoJ,EAOX,WAAAxL,CAAYmE,GACVhE,KAAKgE,OAASA,CACf,CAOD,cAAAsH,CAAevJ,GACb,MAAM+E,EAAS9G,KAAKgE,OAAO8G,cAAchE,OACnCyE,EAAS,IAAIC,OAAO1E,GAE1B,IACE,MAAM2E,EAAMvL,EAAW4B,gBAAgBC,EAAW,YAE5C2J,EAAa,CAACzJ,EAAY0J,EAAQ,KACtC,MAAMC,EAAML,EAAOC,OAAOG,GAE1B,OAAQ1J,EAAKoB,UACX,KAAKnD,EAAWG,UAAUS,aAAc,CACtC,MAAM+K,EAAK5J,EACLG,EAAUyJ,EAAGzJ,QACbmH,EAAQ9E,MAAMqH,KAAKD,EAAGnI,YACzBkB,KAAKmH,GAAM,GAAGA,EAAE9L,SAAS8L,EAAE/I,WAC3BgJ,KAAK,KACFC,EAAU1C,EAAQ,IAAInH,KAAWmH,KAAW,IAAInH,KAEhD+C,EAAWV,MAAMqH,KAAKD,EAAGjC,YAE/B,GAAwB,IAApBzE,EAASxB,OACX,MAAO,GAAGiI,IAAMK,EAAQC,QAAQ,KAAM,WAIxC,GACsB,IAApB/G,EAASxB,QACY,IAApBwB,EAASxB,QACRwB,EAAS,GAAG9B,WAAanD,EAAWG,UAAUW,WACV,KAApCmE,EAAS,GAAGyD,aAAa0B,OAG3B,MAAO,GAAGsB,KAAOxJ,IAAUmH,EAAQ,IAAMA,EAAQ,QAAQnH,OAM3D,MAAO,GAAGwJ,IAAMK,MAHF9G,EACXP,KAAKmB,GAAU2F,EAAW3F,EAAO4F,EAAQ,KACzCK,KAAK,MAC4BJ,MAAQxJ,MAC7C,CAED,KAAKlC,EAAWG,UAAUW,UAAW,CACnC,MAAMmJ,EAAOlI,EAAK2G,aAAa0B,OAC/B,OAAOH,EAAO,GAAGyB,IAAMzB,MAAW,EACnC,CAED,KAAKjK,EAAWG,UAAUY,mBACxB,MAAO,GAAG2K,aAAe3J,EAAKmI,iBAEhC,KAAKlK,EAAWG,UAAUa,aACxB,MAAO,GAAG0K,WAAU3J,EAAKmI,oBAE3B,KAAKlK,EAAWG,UAAUc,4BACxB,MAAMgL,EAAKlK,EACX,MAAO,GAAG2J,MAAQO,EAAGtJ,UAAUsJ,EAAG1J,WAEpC,KAAKvC,EAAWG,UAAUe,cACxB,OAAOqD,MAAMqH,KAAK7J,EAAK2H,YACpBhF,KAAKmB,GAAU2F,EAAW3F,EAAO4F,KACjCK,KAAK,IAEV,QACE,MAAO,GACV,EAGH,OAAON,EAAWD,GAAKnB,MACxB,CAAC,MAAO5I,GACP,MAAM,IAAI/B,EACR,+BACE+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KAGrD,CACF,CAOD,WAAA0K,CAAYrK,GAIV,IACE,MACM2G,EADMxI,EAAW4B,gBAAgBC,EAAW,YAC/B4G,qBAAqB,eACxC,OAAID,EAAO/E,OAAS,EACX,CACL0I,SAAS,EACTvM,QAAS4I,EAAO,GAAGE,aAAe,yBAG/B,CAAEyD,SAAS,EACnB,CAAC,MAAO3K,GACP,MAAO,CACL2K,SAAS,EACTvM,QAAS4B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,GAE5D,CACF,CAOD,oBAAA4K,CAAqBvK,GACnB,OAAKA,EAAUuI,OAAOiC,WAAW,SAG1BxK,EAFE,2CAA6CA,CAGvD,CAOD,SAAAyK,CAAUrC,GACR,MAAoB,iBAATA,GAAqC,IAAhBA,EAAKxG,OAC5B,GAGFwG,EAAK+B,QAAQ,YAAaO,IAC/B,OAAQA,GACN,IAAK,IACH,MAAO,QACT,IAAK,IACH,MAAO,OACT,IAAK,IACH,MAAO,OACT,IAAK,IACH,MAAO,SACT,IAAK,IACH,MAAO,SACT,QACE,OAAOA,EACV,GAEJ,CAOD,WAAAC,CAAYvC,GACV,MAAoB,iBAATA,GAAqC,IAAhBA,EAAKxG,OAC5B,GAGFwG,EAAK+B,QAAQ,4BAA4B,CAACS,EAAOC,KACtD,OAAQA,GACN,IAAK,MACH,MAAO,IACT,IAAK,KACH,MAAO,IACT,IAAK,KACH,MAAO,IACT,IAAK,OACH,MAAO,IACT,IAAK,OACH,MAAO,IACT,QACE,OAAOD,EACV,GAEJ,CAOD,aAAAE,CAActK,GACZ,MAAMuK,EAAavK,EAAcwK,QAAQ,KACzC,OAAOD,EAAa,EAAIvK,EAAcyK,UAAU,EAAGF,GAAc,IAClE,CAOD,gBAAAG,CAAiB1K,GACf,MAAMuK,EAAavK,EAAcwK,QAAQ,KACzC,OAAOD,EAAa,EAChBvK,EAAcyK,UAAUF,EAAa,GACrCvK,CACL,CAQD,mBAAA2K,CAAoB7H,EAAuB2D,GACzC,OAAO3D,EAAS,GAAGA,KAAU2D,IAAcA,CAC5C,QCpNUmE,EASX,WAAAtN,CAAYmE,GACVhE,KAAKgE,OAASA,EACdhE,KAAKoN,QAAU,IAAI/B,EAAQrL,KAAKgE,QAChChE,KAAKwI,cAAgB,IAAIhB,EAAcxH,KAAKgE,OAC7C,CAOM,SAAAqJ,CAAUC,GACf,IACE,MAAM7B,EAAMvL,EAAWgC,iBACjBqL,EAAcvN,KAAKwN,WAAWF,EAAS7B,GAEzC8B,IAEE9B,EAAI3C,iBAAoD,SAAjC2C,EAAI3C,gBAAgBb,SAC7CwD,EAAIgC,aAAaF,EAAa9B,EAAI3C,iBAElC2C,EAAIiC,YAAYH,IAKpB,IAAIxL,EAAY7B,EAAW8B,kBAAkByJ,GAc7C,OAXA1J,EAAYA,EAAUmK,QAAQ,wCAAyC,IAEnElM,KAAKgE,OAAO8G,cAAc6C,IAAIC,cAChC7L,EAAY/B,KAAKoN,QAAQd,qBAAqBvK,IAI5C/B,KAAKgE,OAAO8G,cAAc+C,cAC5B9L,EAAY/B,KAAKoN,QAAQ9B,eAAevJ,IAGnCA,CACR,CAAC,MAAOL,GACP,MAAM,IAAI/B,EACR,kCACE+B,aAAiB9B,MAAQ8B,EAAM5B,QAAU6B,OAAOD,KAGrD,CACF,CAUO,UAAA8L,CACNF,EACA7B,EACA1C,EACA7E,EAAe,IAEf,IAAKoJ,GAA8B,iBAAZA,EACrB,OAAO,KAIT,MAAMrF,EAAWvC,OAAOkB,KAAK0G,GAAS,GACtC,IAAKrF,EACH,OAAO,KAGT,MAAM6F,EAAWR,EAAQrF,GAGnBiB,EAAchF,EAAO,GAAGA,KAAQ+D,IAAaA,EAGnD,IAAIlF,EACJ,MAAMgL,EAAe/N,KAAKgE,OAAOkB,UAAUE,UACrC4I,EAAYhO,KAAKgE,OAAOkB,UAAUG,OAClCgE,EAAKyE,EAASC,GACd1I,EAASyI,EAASE,GAGlBtG,EAAU1H,KAAKwI,cAAcT,cACjC,cACAE,EACA/H,EAAWG,UAAUS,aACrB,CACEoD,KAAMgF,EACN9D,UAAWiE,EACXhE,OAAQA,EACRgD,OAAQU,IAORhG,EAHAsG,GAAMrJ,KAAKgE,OAAOoF,mBAChB/D,EAEQnF,EAAWmC,gBAAgBgH,EAAI,GAAGhE,KAAU4C,KAG5C/H,EAAWmC,gBAAgBgH,EAAIpB,GAIjC/H,EAAWiC,cAAc8F,GAIrC,MAAMgG,EAAgBjO,KAAKgE,OAAOkB,UAAUxB,WACtCmG,EAAW7J,KAAKgE,OAAOkB,UAAUlC,MAsDvC,GApDEhD,KAAKgE,OAAOsF,oBACZwE,EAASG,IACTxJ,MAAMC,QAAQoJ,EAASG,KAEvBH,EAASG,GAAe5G,SACrBqC,IACC,MAAMwE,EAAWxI,OAAOkB,KAAK8C,GAAS,GACtC,IAAKwE,EAAU,OAEf,MAAMC,EAAWzE,EAAQwE,GAGnBzE,EAAczJ,KAAKwI,cAAcT,cACrC,cACAE,EACA/H,EAAWG,UAAUS,aACrB,CACEoD,KAAM,GAAGgF,KAAegF,IACxB9I,UAAW+I,EAASJ,GACpB1I,OAAQ8I,EAASH,GACjB7F,aAAa,EACbC,cAAe8F,EACf7F,OAAQX,IAKNE,EAAmB5H,KAAKwI,cAAcf,gBAC1C0G,EAAStE,IAAa,GACtBJ,GAGI2E,EAASD,EAASJ,GAClBM,EAAaF,EAASH,GAG5B,IAAIzL,EAAgB2L,EAChBG,GAAcrO,KAAKgE,OAAOoF,qBAC5B7G,EAAgB,GAAG8L,KAAcH,KAGnChO,EAAW4C,uBACTC,EACCqL,GAAUpO,KAAKgE,OAAOoF,mBAAsBgF,EAAS,KACtD7L,EACAqF,EACD,SAMoBxD,IAAvB0J,EAASjE,GAAyB,CAEpC,MAAMU,EAAcvK,KAAKwI,cAAcT,cACrC,cACAE,EACA/H,EAAWG,UAAUW,UACrB,CACEkD,KAAM,GAAGgF,UACT9D,UAAWiE,EACXhE,OAAQA,EACRgD,OAAQX,IAINE,EAAmB5H,KAAKwI,cAAcf,gBAC1CqG,EAASjE,GACTU,GAGFxH,EAAQ6F,YAAchB,CACvB,CAGD,MAAMtB,EAActG,KAAKgE,OAAOkB,UAAUC,SACpC2E,EAAW9J,KAAKgE,OAAOkB,UAAUI,MACjCyE,EAAc/J,KAAKgE,OAAOkB,UAAUK,SACpCyE,EAAiBhK,KAAKgE,OAAOkB,UAAUM,YACvCyE,EAAYjK,KAAKgE,OAAOkB,UAAUrC,OAiGxC,OA9FEiL,EAASxH,IACT7B,MAAMC,QAAQoJ,EAASxH,KAEvBwH,EAASxH,GAAae,SACnBtB,IAEC,QACsB3B,IAApB2B,EAAM8D,IACN7J,KAAKgE,OAAOkG,kBACZ,CAEA,MAAMK,EAAcvK,KAAKwI,cAAcT,cACrC,cACA,QACA7H,EAAWG,UAAUW,UACrB,CACEkD,KAAM,GAAGgF,UACTb,OAAQX,IAIN8C,EAAkBxK,KAAKwI,cAAcf,gBACzC1B,EAAM8D,GACNU,GAGFxH,EAAQ2K,YACNxN,EAAWsC,eAAexC,KAAKoN,QAAQZ,UAAUhC,IAEpD,MAEI,QACiBpG,IAApB2B,EAAM+D,IACN9J,KAAKgE,OAAOyG,cACZ,CAEA,MAAMC,EAAe1K,KAAKwI,cAAcT,cACtC,cACA,SACA7H,EAAWG,UAAUY,mBACrB,CACEiD,KAAM,GAAGgF,WACTb,OAAQX,IAINiD,EAAmB3K,KAAKwI,cAAcf,gBAC1C1B,EAAM+D,GACNY,GAGF3H,EAAQ2K,YACNxN,EAAWwC,mBACTiI,GAGL,MAEI,QACoBvG,IAAvB2B,EAAMgE,IACN/J,KAAKgE,OAAO4G,iBAEZ7H,EAAQ2K,YACNxN,EAAWyC,cACToD,EAAMgE,UAKP,QACuB3F,IAA1B2B,EAAMiE,IACNhK,KAAKgE,OAAO6G,wBACZ,CACA,MAAMyD,EAASvI,EAAMiE,GACfnH,EAASyL,EAAOrE,GAChBxH,EAAO6L,EAAOzE,IAAa,GAE7BhH,GACFE,EAAQ2K,YACNxN,EAAW0C,4BAA4BC,EAAQJ,GAGpD,KAEI,CACH,MAAM8L,EAAevO,KAAKwN,WAAWzH,EAAO0F,EAAK/D,EAASwB,GACtDqF,GACFxL,EAAQ2K,YAAYa,EAEvB,KAKAxL,CACR,ECnTU,MAAAyL,EAAgC,CAC3CpF,oBAAoB,EACpBwB,kBAAkB,EAClBC,yBAAyB,EACzBJ,eAAe,EACfP,mBAAmB,EACnBG,oBAAoB,EACpBf,oBAAoB,EAEpBwB,cAAe,CACb+C,aAAa,EACb/G,OAAQ,EACRiE,SAAS,EACT0D,KAAM,CAAE,EACRd,IAAK,CACHC,aAAa,IAIjB1I,UAAW,CACTE,UAAW,MACXC,OAAQ,OACR3B,WAAY,QACZV,MAAO,OACPsC,MAAO,SACPC,SAAU,QACVC,YAAa,MACb3C,OAAQ,QACRsC,SAAU,oBCxBDuJ,EAWX,WAAA7O,CAAYmE,EAAiC,IAE3ChE,KAAKuI,SAAW,IAAIxE,EAASyK,GAG7B,MAAMG,EAAe3O,KAAKuI,SAAStB,UAAUuH,GAG7CxO,KAAKgE,OAAShE,KAAKuI,SAASpB,UAAyBwH,EAAc3K,GAGnEhE,KAAKuI,SAAW,IAAIxE,EAAS/D,KAAKgE,QAGlChE,KAAKoN,QAAU,IAAI/B,EAAQrL,KAAKgE,QAChChE,KAAK4O,UAAY,IAAItG,EAAUtI,KAAKgE,QACpChE,KAAK6O,UAAY,IAAI1B,EAAUnN,KAAKgE,OACrC,CAOM,SAAA8K,CAAU/M,GACf,OAAO/B,KAAK4O,UAAU1H,MAAMnF,EAC7B,CAOM,SAAAgN,CAAUzB,GACf,OAAOtN,KAAK6O,UAAUxB,UAAUC,EACjC,CAOM,cAAAhC,CAAevJ,GACpB,OAAO/B,KAAKoN,QAAQ9B,eAAevJ,EACpC,CASM,OAAAkC,CACLb,EACAc,EACAC,OAAgBC,GAEhB,OAAOpE,KAAKuI,SAAStE,QAAQb,EAAKc,EAAMC,EACzC,CAOM,WAAAiI,CAAYrK,GAIjB,OAAO/B,KAAKoN,QAAQhB,YAAYrK,EACjC,CAOM,cAAAiN,CAAenH,GAKpB,OAJK7H,KAAKgE,OAAO2D,kBACf3H,KAAKgE,OAAO2D,gBAAkB,IAEhC3H,KAAKgE,OAAO2D,gBAAgBgC,KAAK9B,GAC1B7H,IACR,CAMM,iBAAAiP,GAEL,OADAjP,KAAKgE,OAAO2D,gBAAkB,GACvB3H,IACR,CAKM,OAAA6D,GACL3D,EAAW2D,SACZ,qDC9ED,OAAAiE,CAAQ9E,EAAY0E,GAClB,MAA0B,gBAAtBA,EAAQM,UACHhI,KAAK8O,UAAU9L,EAAO0E,GAEtB1H,KAAK+O,UAAU/L,EAAO0E,EAEhC,CAQS,SAAAoH,CAAU9L,EAAY0E,GAE9B,OAAO1E,CACR,CAQS,SAAA+L,CAAU/L,EAAY0E,GAE9B,OAAO1E,CACR"}