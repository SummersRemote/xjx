{"version":3,"file":"xjx.min.js","sources":["../../src/core/types/error-types.ts","../../src/core/types/dom-types.ts","../../src/core/adapters/dom-adapter.ts","../../src/core/utils/json-utils.ts","../../src/core/transformers/TransformUtil.ts","../../src/core/converters/xml-to-json-converter.ts","../../src/core/utils/xml-utils.ts","../../src/core/converters/json-to-xml-converter.ts","../../src/core/config/config.ts","../../src/XJX.ts","../../src/core/transformers/ValueTransformer.ts"],"sourcesContent":["/**\n * Error classes for the XJX library\n */\n\n/**\n * Base error class\n */\nexport class XJXError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'XMLToJSONError';\n  }\n}\n\n/**\n * Error for XML parsing issues\n */\nexport class XmlToJsonError extends XJXError {\n  constructor(message: string) {\n    super(`XML parse error: ${message}`);\n    this.name = 'XmlToJsonError';\n  }\n}\n\n/**\n * Error for XML serialization issues\n */\nexport class JsonToXmlError extends XJXError {\n  constructor(message: string) {\n    super(`XML serialization error: ${message}`);\n    this.name = 'JsonToXmlError';\n  }\n}\n\n/**\n * Error for environment incompatibility\n */\nexport class EnvironmentError extends XJXError {\n  constructor(message: string) {\n    super(`Environment error: ${message}`);\n    this.name = 'EnvironmentError';\n  }\n}\n\n/**\n * Error for invalid configuration\n */\nexport class ConfigurationError extends XJXError {\n  constructor(message: string) {\n    super(`Configuration error: ${message}`);\n    this.name = 'ConfigurationError';\n  }\n}","/**\n * DOM node types as an enum for better type safety\n */\nexport enum NodeType {\n    ELEMENT_NODE = 1,\n    ATTRIBUTE_NODE = 2,\n    TEXT_NODE = 3, \n    CDATA_SECTION_NODE = 4,\n    PROCESSING_INSTRUCTION_NODE = 7,\n    COMMENT_NODE = 8,\n    DOCUMENT_NODE = 9\n  }","/**\n * DOM Environment provider with unified interface for browser and Node.js\n */\nimport { XJXError } from '../types/error-types';\nimport { NodeType } from '../types/dom-types';\n\n\ninterface DOMWindow {\n  DOMParser: any;\n  XMLSerializer: any;\n  // Node: {\n  //   ELEMENT_NODE: number;\n  //   TEXT_NODE: number;\n  //   CDATA_SECTION_NODE: number;\n  //   COMMENT_NODE: number;\n  //   PROCESSING_INSTRUCTION_NODE: number;\n  //   DOCUMENT_NODE: number; \n  // };\n  document: Document;\n  close?: () => void; \n}\n\ninterface JSDOMInstance {\n  window: DOMWindow;\n}\n\nexport const DOMAdapter = (() => {\n  // Environment-specific DOM implementation\n  let domParser: any;\n  let xmlSerializer: any;\n  // let nodeTypes: NodeTypes;\n  let docImplementation: any;\n  let jsdomInstance: JSDOMInstance | null = null;\n\n  try {\n    if (typeof window === \"undefined\") {\n      // Node.js environment - try JSDOM first\n      try {\n        const { JSDOM } = require(\"jsdom\");\n        jsdomInstance = new JSDOM(\"<!DOCTYPE html><html><body></body></html>\", {\n          contentType: \"text/xml\",\n        }) as JSDOMInstance;\n\n        domParser = jsdomInstance.window.DOMParser;\n        xmlSerializer = jsdomInstance.window.XMLSerializer;\n        // nodeTypes = {\n        //   ELEMENT_NODE: jsdomInstance.window.Node.ELEMENT_NODE,\n        //   TEXT_NODE: jsdomInstance.window.Node.TEXT_NODE,\n        //   CDATA_SECTION_NODE: jsdomInstance.window.Node.CDATA_SECTION_NODE,\n        //   COMMENT_NODE: jsdomInstance.window.Node.COMMENT_NODE,\n        //   PROCESSING_INSTRUCTION_NODE: jsdomInstance.window.Node.PROCESSING_INSTRUCTION_NODE,\n        //   DOCUMENT_NODE: jsdomInstance.window.Node.DOCUMENT_NODE, // Add this line\n        // };\n        docImplementation = jsdomInstance.window.document.implementation;\n      } catch (jsdomError) {\n        // Fall back to xmldom if JSDOM isn't available\n        try {\n          const { DOMParser, XMLSerializer, DOMImplementation } = require('@xmldom/xmldom');\n          domParser = DOMParser;\n          xmlSerializer = XMLSerializer;\n          // Standard DOM node types\n          // nodeTypes = {\n          //   ELEMENT_NODE: 1,\n          //   TEXT_NODE: 3,\n          //   CDATA_SECTION_NODE: 4,\n          //   COMMENT_NODE: 8,\n          //   PROCESSING_INSTRUCTION_NODE: 7,\n          //   DOCUMENT_NODE: 9, \n          // };\n          const implementation = new DOMImplementation();\n          docImplementation = implementation;\n        } catch (xmldomError) {\n          throw new XJXError(`Node.js environment detected but neither 'jsdom' nor '@xmldom/xmldom' are available.`);\n        }\n      }\n    } else {\n      // Browser environment\n      if (!window.DOMParser) {\n        throw new XJXError(\"DOMParser is not available in this environment\");\n      }\n\n      if (!window.XMLSerializer) {\n        throw new XJXError(\"XMLSerializer is not available in this environment\");\n      }\n\n      domParser = window.DOMParser;\n      xmlSerializer = window.XMLSerializer;\n      // nodeTypes = {\n      //   ELEMENT_NODE: Node.ELEMENT_NODE,\n      //   TEXT_NODE: Node.TEXT_NODE,\n      //   CDATA_SECTION_NODE: Node.CDATA_SECTION_NODE,\n      //   COMMENT_NODE: Node.COMMENT_NODE,\n      //   PROCESSING_INSTRUCTION_NODE: Node.PROCESSING_INSTRUCTION_NODE,\n      //   DOCUMENT_NODE: Node.DOCUMENT_NODE, \n      // };\n      docImplementation = document.implementation;\n    }\n  } catch (error) {\n    throw new XJXError(`DOM environment initialization failed: ${error instanceof Error ? error.message : String(error)}`);\n  }\n\n  return {\n    createParser: () => {\n      try {\n        return new domParser();\n      } catch (error) {\n        throw new XJXError(`Failed to create DOM parser: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createSerializer: () => {\n      try {\n        return new xmlSerializer();\n      } catch (error) {\n        throw new XJXError(`Failed to create XML serializer: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    NodeType,\n    \n    parseFromString: (xmlString: string, contentType: string = 'text/xml') => {\n      try {\n        const parser = new domParser();\n        return parser.parseFromString(xmlString, contentType);\n      } catch (error) {\n        throw new XJXError(`Failed to parse XML: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    serializeToString: (node: Node) => {\n      try {\n        const serializer = new xmlSerializer();\n        return serializer.serializeToString(node);\n      } catch (error) {\n        throw new XJXError(`Failed to serialize XML: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createDocument: () => {\n      try {\n        // For browsers, create a document with a root element to avoid issues\n        if (typeof window !== \"undefined\") {\n          const parser = new domParser();\n          return parser.parseFromString('<temp></temp>', 'text/xml');\n        } else {\n          return docImplementation.createDocument(null, null, null);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create document: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createElement: (tagName: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createElement(tagName);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createElement(tagName);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create element: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createElementNS: (namespaceURI: string, qualifiedName: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createElementNS(namespaceURI, qualifiedName);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createElementNS(namespaceURI, qualifiedName);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create element with namespace: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createTextNode: (data: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createTextNode(data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createTextNode(data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create text node: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createCDATASection: (data: string) => {\n      try {\n        // For browser compatibility, use document.implementation to create CDATA\n        if (typeof window !== \"undefined\") {\n          const doc = document.implementation.createDocument(null, null, null);\n          return doc.createCDATASection(data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createCDATASection(data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create CDATA section: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createComment: (data: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createComment(data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createComment(data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create comment: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createProcessingInstruction: (target: string, data: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          const doc = document.implementation.createDocument(null, null, null);\n          return doc.createProcessingInstruction(target, data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createProcessingInstruction(target, data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create processing instruction: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    // New helper methods\n    \n    /**\n     * Creates a proper namespace qualified attribute\n     */\n    setNamespacedAttribute: (element: Element, namespaceURI: string | null, qualifiedName: string, value: string): void => {\n      try {\n        if (namespaceURI) {\n          element.setAttributeNS(namespaceURI, qualifiedName, value);\n        } else {\n          element.setAttribute(qualifiedName, value);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to set attribute: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    /**\n     * Check if an object is a DOM node\n     */\n    isNode: (obj: any): boolean => {\n      try {\n        return obj && typeof obj === 'object' && typeof obj.nodeType === 'number';\n      } catch (error) {\n        return false;\n      }\n    },\n    \n    /**\n     * Get DOM node type as string for debugging\n     */\n    getNodeTypeName: (nodeType: number): string => {\n      switch (nodeType) {\n        case NodeType.ELEMENT_NODE: return 'ELEMENT_NODE';\n        case NodeType.TEXT_NODE: return 'TEXT_NODE';\n        case NodeType.CDATA_SECTION_NODE: return 'CDATA_SECTION_NODE';\n        case NodeType.COMMENT_NODE: return 'COMMENT_NODE';\n        case NodeType.PROCESSING_INSTRUCTION_NODE: return 'PROCESSING_INSTRUCTION_NODE';\n        default: return `UNKNOWN_NODE_TYPE(${nodeType})`;\n      }\n    },\n    \n    /**\n     * Get all node attributes as an object\n     */\n    getNodeAttributes: (node: Element): Record<string, string> => {\n      const result: Record<string, string> = {};\n      for (let i = 0; i < node.attributes.length; i++) {\n        const attr = node.attributes[i];\n        result[attr.name] = attr.value;\n      }\n      return result;\n    },\n    \n    // Cleanup method (mainly for JSDOM)\n    cleanup: () => {\n      if (jsdomInstance && typeof jsdomInstance.window.close === 'function') {\n        jsdomInstance.window.close();\n      }\n    }\n  };\n})();","/**\n * JSONUtil - Utility functions for JSON processing\n */\nimport { Configuration } from \"../types/config-types\";\nimport { JSONValue } from \"../types/json-types\";\n\nexport class JsonUtil {\n  private config: Configuration;\n\n  /**\n   * Constructor for JSONUtil\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n  }\n\n  /**\n   * Safely retrieves a value from a JSON object using a dot-separated path.\n   * Automatically traverses into children arrays and flattens results.\n   *\n   * @param obj The input JSON object\n   * @param path The dot-separated path string (e.g., \"root.item.description.$val\")\n   * @param fallback Value to return if the path does not resolve\n   * @returns Retrieved value or fallback\n   */\n  getPath(\n    obj: Record<string, any>,\n    path: string,\n    fallback?: JSONValue\n  ): any {\n    const segments = path.split(\".\");\n    let current: any = obj;\n\n    for (const segment of segments) {\n      if (Array.isArray(current)) {\n        // Apply the segment to each array element and flatten results\n        const results = current\n          .map((item) => this.resolveSegment(item, segment))\n          .flat()\n          .filter((v) => v !== undefined);\n        current = results.length > 0 ? results : undefined;\n      } else {\n        current = this.resolveSegment(current, segment);\n      }\n\n      if (current === undefined) return fallback;\n    }\n\n    // Collapse singleton arrays\n    if (Array.isArray(current) && current.length === 1) {\n      return current[0];\n    }\n\n    return current !== undefined ? current : fallback;\n  }\n\n  /**\n   * Resolves a single path segment in the context of a JSON object.\n   * Falls back to searching children for matching keys.\n   *\n   * @param obj The current object\n   * @param segment The path segment to resolve\n   * @returns Resolved value or undefined\n   */\n  private resolveSegment(obj: any, segment: string): any {\n    if (obj == null || typeof obj !== \"object\") return undefined;\n\n    // Direct property access\n    if (segment in obj) {\n      return obj[segment];\n    }\n\n    // Check if this is a special property name that matches the config\n    if (\n      segment === this.config.propNames.value ||\n      segment === this.config.propNames.children ||\n      segment === this.config.propNames.attributes ||\n      segment === this.config.propNames.namespace ||\n      segment === this.config.propNames.prefix ||\n      segment === this.config.propNames.cdata ||\n      segment === this.config.propNames.comments ||\n      segment === this.config.propNames.instruction ||\n      segment === this.config.propNames.target\n    ) {\n      const configKey = Object.entries(this.config.propNames).find(\n        ([_, value]) => value === segment\n      )?.[0];\n\n      if (configKey && obj[segment] !== undefined) {\n        return obj[segment];\n      }\n    }\n\n    // Check children for objects that contain the segment\n    const childrenKey = this.config.propNames.children;\n    const children = obj[childrenKey];\n    if (Array.isArray(children)) {\n      const matches = children\n        .map((child) => (segment in child ? child[segment] : undefined))\n        .filter((v) => v !== undefined);\n      return matches.length > 0 ? matches : undefined;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Converts a plain JSON object to the XML-like JSON structure.\n   * Optionally wraps the result in a root element with attributes and namespaces.\n   *\n   * @param obj Standard JSON object\n   * @param root Optional root element configuration (either a string or object with $ keys)\n   * @returns XML-like JSON object\n   */\n  objectToXJX(obj: any, root?: any): any {\n    const wrappedObject = this.wrapObject(obj);\n\n    if (typeof root === \"string\") {\n      // Root is a simple string: wrap result with this root tag\n      return { [root]: wrappedObject };\n    }\n\n    if (root && typeof root === \"object\") {\n      // Handle root with config-based keys\n      const elementName = root.name || \"root\"; // Default to \"root\" if no name is provided\n      const prefix = root[this.config.propNames.prefix] || \"\";\n      const qualifiedName = prefix ? `${prefix}:${elementName}` : elementName;\n\n      const result: any = {\n        [qualifiedName]: {},\n      };\n\n      // Add attributes to the root element if defined\n      const attrsKey = this.config.propNames.attributes;\n      if (root[attrsKey] && Array.isArray(root[attrsKey])) {\n        result[qualifiedName][attrsKey] = root[attrsKey];\n      }\n\n      // Merge existing children with the new generated children\n      const childrenKey = this.config.propNames.children;\n      const children = root[childrenKey] ? root[childrenKey] : [];\n      result[qualifiedName][childrenKey] = [\n        ...children,\n        { [elementName]: wrappedObject },\n      ];\n\n      // Add namespace and prefix if defined\n      const nsKey = this.config.propNames.namespace;\n      if (root[nsKey]) {\n        result[qualifiedName][nsKey] = root[nsKey];\n      }\n\n      if (prefix && root[nsKey]) {\n        result[qualifiedName][`xmlns:${prefix}`] = root[nsKey];\n      }\n\n      return result;\n    }\n\n    // Default behavior if no root is provided\n    return wrappedObject;\n  }\n\n  /**\n   * Wraps a standard JSON value in the XML-like JSON structure\n   * @param value Value to wrap\n   * @returns Wrapped value\n   */\n  private wrapObject(value: any): any {\n    const valKey = this.config.propNames.value;\n    const childrenKey = this.config.propNames.children;\n\n    if (\n      value === null ||\n      typeof value === \"string\" ||\n      typeof value === \"number\" ||\n      typeof value === \"boolean\"\n    ) {\n      return { [valKey]: value };\n    }\n\n    if (Array.isArray(value)) {\n      // For arrays, wrap each item and return as a children-style array of repeated elements\n      return {\n        [childrenKey]: value.map((item) => {\n          return this.wrapObject(item);\n        }),\n      };\n    }\n\n    if (typeof value === \"object\") {\n      // It's an object: wrap its properties in children\n      const children = Object.entries(value).map(([key, val]) => ({\n        [key]: this.wrapObject(val),\n      }));\n\n      return { [childrenKey]: children };\n    }\n\n    return undefined; // Fallback for unhandled types\n  }\n\n  /**\n   * Check if an object is empty\n   * @param value Value to check\n   * @returns true if empty\n   */\n  isEmpty(value: any): boolean {\n    if (value == null) return true;\n    if (Array.isArray(value)) return value.length === 0;\n    if (typeof value === \"object\") return Object.keys(value).length === 0;\n    return false;\n  }\n\n  /**\n   * Safely stringify JSON for debugging\n   * @param obj Object to stringify\n   * @param indent Optional indentation level\n   * @returns JSON string representation\n   */\n  safeStringify(obj: any, indent: number = 2): string {\n    try {\n      return JSON.stringify(obj, null, indent);\n    } catch (error) {\n      return \"[Cannot stringify object]\";\n    }\n  }\n\n  /**\n   * Deep clone an object\n   * @param obj Object to clone\n   * @returns Cloned object\n   */\n  deepClone(obj: any): any {\n    try {\n      return JSON.parse(JSON.stringify(obj));\n    } catch (error) {\n      throw new Error(\n        `Failed to deep clone object: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Deep merge two objects with proper type handling\n   * @param target Target object\n   * @param source Source object\n   * @returns Merged object (target is modified)\n   */\n  deepMerge<T>(target: T, source: Partial<T>): T {\n    if (!source || typeof source !== \"object\" || source === null) {\n      return target;\n    }\n\n    if (!target || typeof target !== \"object\" || target === null) {\n      return source as unknown as T;\n    }\n\n    Object.keys(source).forEach((key) => {\n      const sourceValue = source[key as keyof Partial<T>];\n      const targetValue = target[key as keyof T];\n\n      // If both source and target values are objects, recursively merge them\n      if (\n        sourceValue !== null &&\n        targetValue !== null &&\n        typeof sourceValue === \"object\" &&\n        typeof targetValue === \"object\" &&\n        !Array.isArray(sourceValue) &&\n        !Array.isArray(targetValue)\n      ) {\n        // Recursively merge the nested objects\n        (target as any)[key] = this.deepMerge(targetValue, sourceValue as any);\n      } else {\n        // Otherwise just replace the value\n        (target as any)[key] = sourceValue;\n      }\n    });\n\n    return target;\n  }\n\n  /**\n   * Generates a JSON schema that matches the current configuration\n   * @returns JSON schema object\n   */\n  generateJsonSchema(): Record<string, any> {\n    try {\n      const propNames = this.config.propNames;\n      const compact = this.config.outputOptions.compact || false;\n      const preserveNamespaces = this.config.preserveNamespaces;\n      const preserveComments = this.config.preserveComments;\n      const preserveCDATA = this.config.preserveCDATA;\n      const preserveProcessingInstr = this.config.preserveProcessingInstr;\n      const preserveTextNodes = this.config.preserveTextNodes;\n      const preserveWhitespace = this.config.preserveWhitespace;\n      const preserveAttributes = this.config.preserveAttributes;\n\n      // Determine which properties are required based on the configuration\n      const requiredProps: string[] = [];\n\n      if (!compact) {\n        // Only add collections as required if they're preserved in the config\n        if (preserveAttributes) requiredProps.push(propNames.attributes);\n\n        if (preserveCDATA) requiredProps.push(propNames.cdata);\n        if (preserveComments) requiredProps.push(propNames.comments);\n        if (preserveProcessingInstr) requiredProps.push(propNames.instruction);\n        requiredProps.push(propNames.children);\n\n        if (preserveTextNodes) {\n          requiredProps.push(propNames.value);\n\n          if (preserveNamespaces) {\n            requiredProps.push(propNames.namespace);\n            // Note: prefix is not required as it may not be present for all elements\n          }\n        }\n      }\n\n      // Create schema for element properties\n      const elementProperties: Record<string, any> = {};\n\n      // Add namespace property if preserving namespaces\n      if (preserveNamespaces) {\n        elementProperties[propNames.namespace] = {\n          description: \"Namespace URI of the element\",\n          type: \"string\",\n        };\n\n        // Add prefix property if preserving namespaces\n        elementProperties[propNames.prefix] = {\n          description: \"Namespace prefix of the element\",\n          type: \"string\",\n        };\n      }\n\n      // Add value property if preserving text nodes\n      if (preserveTextNodes) {\n        elementProperties[propNames.value] = {\n          description: \"Text content of the element\",\n          type: \"string\",\n        };\n      }\n\n      // Add attributes property\n      if (preserveAttributes) {\n        elementProperties[propNames.attributes] = {\n          description: \"Element attributes\",\n          type: \"array\",\n          items: {\n            type: \"object\",\n            patternProperties: {\n              \"^.*$\": {\n                type: \"object\",\n                properties: {\n                  [propNames.value]: {\n                    description: \"Attribute value\",\n                    type: \"string\",\n                  },\n                },\n                required: [propNames.value],\n              },\n            },\n            additionalProperties: false,\n          },\n        };\n\n        // If preserving namespaces, add namespace properties to attribute schema\n        if (preserveNamespaces) {\n          const attrProps =\n            elementProperties[propNames.attributes].items.patternProperties[\n              \"^.*$\"\n            ].properties;\n\n          attrProps[propNames.namespace] = {\n            description: \"Namespace URI of the attribute\",\n            type: \"string\",\n          };\n\n          attrProps[propNames.prefix] = {\n            description: \"Namespace prefix of the attribute\",\n            type: \"string\",\n          };\n        }\n      }\n\n      // Add CDATA property if preserving CDATA\n      if (preserveCDATA) {\n        elementProperties[propNames.cdata] = {\n          description: \"CDATA section content\",\n          type: \"string\",\n        };\n      }\n\n      // Add comments property if preserving comments\n      if (preserveComments) {\n        elementProperties[propNames.comments] = {\n          description: \"Comment content\",\n          type: \"string\",\n        };\n      }\n\n      // Add processing instructions property if preserving them\n      if (preserveProcessingInstr) {\n        elementProperties[propNames.instruction] = {\n          description: \"Processing instruction\",\n          type: \"object\",\n          properties: {\n            [propNames.target]: {\n              description: \"Processing instruction target\",\n              type: \"string\",\n            },\n            [propNames.value]: {\n              description: \"Processing instruction content\",\n              type: \"string\",\n            },\n          },\n          required: [propNames.target],\n        };\n      }\n\n      // Add children property with recursive schema\n      elementProperties[propNames.children] = {\n        description: \"Child elements\",\n        type: \"array\",\n        items: {\n          type: \"object\",\n          patternProperties: {\n            \"^.*$\": {\n              $ref: \"#/definitions/element\",\n            },\n          },\n          additionalProperties: false,\n        },\n      };\n\n      // Create element definition (will be referenced recursively)\n      const elementDefinition = {\n        type: \"object\",\n        properties: elementProperties,\n        required: requiredProps,\n        additionalProperties: false,\n      };\n\n      // Build the complete schema\n      const schema = {\n        $schema: \"https://json-schema.org/draft/2020-12/schema\",\n        title: \"XJX JSON Schema\",\n        description:\n          \"Schema for JSON representation of XML documents using the XJX library\",\n        type: \"object\",\n        patternProperties: {\n          \"^.*$\": {\n            $ref: \"#/definitions/element\",\n          },\n        },\n        additionalProperties: false,\n        definitions: {\n          element: elementDefinition,\n        },\n      };\n\n      return schema;\n    } catch (error) {\n      throw new Error(\n        `Schema generation failed: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Generate an example JSON object based on the schema\n   * @param {string} rootName - Name of the root element\n   * @returns {Record<string, any>} - Example JSON object\n   */\n  generateExample(rootName: string = \"root\"): Record<string, any> {\n    const propNames = this.config.propNames;\n    const preserveNamespaces = this.config.preserveNamespaces;\n    const preserveComments = this.config.preserveComments;\n    const preserveCDATA = this.config.preserveCDATA;\n    const preserveProcessingInstr = this.config.preserveProcessingInstr;\n    const preserveAttributes = this.config.preserveAttributes;\n\n    // Simple example with common features\n    const example: Record<string, any> = {\n      [rootName]: {\n        [propNames.value]: \"Root content\",\n        [propNames.children]: [\n          {\n            child: {\n              [propNames.value]: \"Child content\",\n            },\n          },\n        ],\n      },\n    };\n\n    // Add namespace properties if enabled\n    if (preserveNamespaces) {\n      example[rootName][propNames.namespace] = \"http://example.org/ns\";\n      example[rootName][propNames.prefix] = \"ex\";\n      example[rootName][propNames.children][0].child[propNames.namespace] =\n        \"http://example.org/ns\";\n      example[rootName][propNames.children][0].child[propNames.prefix] = \"ex\";\n    }\n\n    // Add attributes if enabled\n    if (preserveAttributes) {\n      example[rootName][propNames.attributes] = [\n        { id: { [propNames.value]: \"root-1\" } },\n        { lang: { [propNames.value]: \"en\" } },\n      ];\n\n      if (preserveNamespaces) {\n        example[rootName][propNames.attributes][1].lang[propNames.prefix] =\n          \"xml\";\n      }\n\n      example[rootName][propNames.children][0].child[propNames.attributes] = [\n        { id: { [propNames.value]: \"child-1\" } },\n      ];\n    }\n\n    // Add CDATA if enabled\n    if (preserveCDATA) {\n      example[rootName][propNames.children][0].child[propNames.children] = [\n        { [propNames.cdata]: \"<data>Raw content</data>\" },\n      ];\n    }\n\n    // Add comments if enabled\n    if (preserveComments) {\n      if (!example[rootName][propNames.children][0].child[propNames.children]) {\n        example[rootName][propNames.children][0].child[propNames.children] = [];\n      }\n\n      example[rootName][propNames.children][0].child[propNames.children].push({\n        [propNames.comments]: \"Comment about the child\",\n      });\n    }\n\n    // Add processing instruction if enabled\n    if (preserveProcessingInstr) {\n      if (!example[rootName][propNames.children]) {\n        example[rootName][propNames.children] = [];\n      }\n\n      example[rootName][propNames.children].unshift({\n        [propNames.instruction]: {\n          [propNames.target]: \"xml-stylesheet\",\n          [propNames.value]: 'type=\"text/css\" href=\"style.css\"',\n        },\n      });\n    }\n\n    return example;\n  }\n}\n","/**\n * Utilities for applying value transformations\n */\nimport { Configuration } from '../types/config-types';\nimport { TransformContext, TransformDirection } from './ValueTransformer';\nimport { DOMAdapter } from '../adapters/dom-adapter';\n\n/**\n * Utility for applying value transformations\n */\nexport class TransformUtil {\n  private config: Configuration;\n\n  /**\n   * Create a new TransformUtil\n   * @param config Configuration\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n  }\n\n  /**\n   * Apply transforms to a value\n   * @param value Value to transform\n   * @param context Transformation context\n   * @returns Transformed value\n   */\n  applyTransforms(value: any, context: TransformContext): any {\n    // Skip transformation if no transformers are configured\n    if (!this.config.valueTransforms || this.config.valueTransforms.length === 0) {\n      return value;\n    }\n\n    // Apply each transformer in sequence\n    let transformedValue = value;\n    for (const transformer of this.config.valueTransforms) {\n      transformedValue = transformer.process(transformedValue, context);\n    }\n\n    return transformedValue;\n  }\n\n  /**\n   * Create a transform context\n   * @param direction Direction of transformation\n   * @param nodeName Name of the current node\n   * @param nodeType DOM node type\n   * @param options Additional context options\n   * @returns Transform context\n   */\n  createContext(\n    direction: TransformDirection,\n    nodeName: string,\n    nodeType: number,\n    options: {\n      path?: string;\n      namespace?: string;\n      prefix?: string;\n      isAttribute?: boolean;\n      attributeName?: string;\n      parent?: TransformContext;\n    } = {}\n  ): TransformContext {\n    return {\n      direction,\n      nodeName,\n      nodeType,\n      path: options.path || nodeName,\n      namespace: options.namespace,\n      prefix: options.prefix,\n      isAttribute: options.isAttribute || false,\n      attributeName: options.attributeName,\n      parent: options.parent,\n      config: this.config,\n    };\n  }\n\n  /**\n   * Get a user-friendly node type name for debugging\n   * @param nodeType DOM node type\n   * @returns String representation of node type\n   */\n  getNodeTypeName(nodeType: number): string {\n    return DOMAdapter.getNodeTypeName(nodeType);\n  }\n}","/**\n * XmlToJsonConverter class for converting XML to JSON with consistent namespace handling\n */\nimport { Configuration } from \"../types/config-types\";\nimport { XJXError } from \"../types/error-types\";\nimport { DOMAdapter } from \"../adapters/dom-adapter\";\nimport { JsonUtil } from \"../utils/json-utils\";\nimport { TransformUtil } from \"../transformers/TransformUtil\";\nimport { TransformContext } from \"../transformers/ValueTransformer\";\n\n/**\n * XmlToJsonConverter Parser for converting XML to JSON\n */\nexport class XmlToJsonConverter {\n  private config: Configuration;\n  private jsonUtil: JsonUtil;\n  private transformUtil: TransformUtil;\n\n  /**\n   * Constructor for XmlToJsonConverter\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n    this.jsonUtil = new JsonUtil(this.config);\n    this.transformUtil = new TransformUtil(this.config);\n  }\n\n  /**\n   * Convert XML string to JSON\n   * @param xmlString XML content as string\n   * @returns JSON object representing the XML content\n   */\n  public convert(xmlString: string): Record<string, any> {\n    try {\n      const xmlDoc = DOMAdapter.parseFromString(xmlString, \"text/xml\");\n\n      // Check for parsing errors\n      const errors = xmlDoc.getElementsByTagName(\"parsererror\");\n      if (errors.length > 0) {\n        throw new XJXError(`XML parsing error: ${errors[0].textContent}`);\n      }\n\n      return this.nodeToJson(xmlDoc.documentElement);\n    } catch (error) {\n      throw new XJXError(\n        `Failed to convert XML to JSON: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Convert a DOM node to JSON representation\n   * @param node DOM node to convert\n   * @param parentContext Optional parent context for transformation chain\n   * @param path Current path in the XML tree\n   * @returns JSON representation of the node\n   */\n  private nodeToJson(node: Node, parentContext?: TransformContext, path: string = \"\"): Record<string, any> {\n    const result: Record<string, any> = {};\n\n    // Handle element nodes\n    if (node.nodeType === DOMAdapter.NodeType.ELEMENT_NODE) {\n      const element = node as Element;\n      // Use localName instead of nodeName to strip namespace prefix\n      const nodeName =\n        element.localName ||\n        element.nodeName.split(\":\").pop() ||\n        element.nodeName;\n\n      // Update the current path\n      const currentPath = path ? `${path}.${nodeName}` : nodeName;\n\n      const nodeObj: Record<string, any> = {};\n\n      // Create context for this node\n      const context = this.transformUtil.createContext(\n        'xml-to-json',\n        nodeName,\n        node.nodeType,\n        {\n          path: currentPath,\n          namespace: element.namespaceURI || undefined,\n          prefix: element.prefix || undefined,\n          parent: parentContext\n        }\n      );\n\n      // Process namespaces if enabled\n      if (this.config.preserveNamespaces) {\n        const ns = element.namespaceURI;\n        if (ns) {\n          nodeObj[this.config.propNames.namespace] = ns;\n        }\n\n        const prefix = element.prefix;\n        if (prefix) {\n          nodeObj[this.config.propNames.prefix] = prefix;\n        }\n      }\n\n      // Process attributes if enabled\n      if (this.config.preserveAttributes && element.attributes.length > 0) {\n        const attrs: Array<Record<string, any>> = [];\n\n        for (let i = 0; i < element.attributes.length; i++) {\n          const attr = element.attributes[i];\n          // Strip namespace prefix from attribute name\n          const attrLocalName =\n            attr.localName || attr.name.split(\":\").pop() || attr.name;\n\n          // Create attribute context\n          const attrContext = this.transformUtil.createContext(\n            'xml-to-json',\n            nodeName,\n            node.nodeType,\n            {\n              path: `${currentPath}.${attrLocalName}`,\n              namespace: attr.namespaceURI || undefined,\n              prefix: attr.prefix || undefined,\n              isAttribute: true,\n              attributeName: attrLocalName,\n              parent: context\n            }\n          );\n\n          // Apply transformations to attribute value\n          const transformedValue = this.transformUtil.applyTransforms(\n            attr.value,\n            attrContext\n          );\n\n          // Create attribute object with consistent structure\n          const attrObj: Record<string, any> = {\n            [attrLocalName]: {\n              [this.config.propNames.value]: transformedValue,\n            },\n          };\n\n          // Add namespace info for attribute if present and enabled\n          if (this.config.preserveNamespaces) {\n            // Handle attribute namespace\n            if (attr.namespaceURI) {\n              attrObj[attrLocalName][this.config.propNames.namespace] =\n                attr.namespaceURI;\n            }\n\n            // Handle attribute prefix\n            if (attr.prefix) {\n              attrObj[attrLocalName][this.config.propNames.prefix] =\n                attr.prefix;\n            }\n          }\n\n          attrs.push(attrObj);\n        }\n\n        if (attrs.length > 0) {\n          nodeObj[this.config.propNames.attributes] = attrs;\n        }\n      }\n\n      // Process child nodes\n      if (element.childNodes.length > 0) {\n        const children: Array<Record<string, any>> = [];\n        const childrenKey = this.config.propNames.children;\n        const valueKey = this.config.propNames.value;\n        const cdataKey = this.config.propNames.cdata;\n        const commentsKey = this.config.propNames.comments;\n        const instructionKey = this.config.propNames.instruction;\n        const targetKey = this.config.propNames.target;\n\n        for (let i = 0; i < element.childNodes.length; i++) {\n          const child = element.childNodes[i];\n\n          // Text nodes - only process if preserveTextNodes is true\n          if (child.nodeType === DOMAdapter.NodeType.TEXT_NODE) {\n            if (this.config.preserveTextNodes) {\n              let text = child.nodeValue || \"\";\n\n              // Skip whitespace-only text nodes if whitespace preservation is disabled\n              if (!this.config.preserveWhitespace) {\n                if (text.trim() === \"\") {\n                  continue;\n                }\n                // Trim the text when preserveWhitespace is false\n                text = text.trim();\n              }\n\n              // Create text node context\n              const textContext = this.transformUtil.createContext(\n                'xml-to-json',\n                '#text',\n                child.nodeType,\n                {\n                  path: `${currentPath}.#text`,\n                  parent: context\n                }\n              );\n\n              // Apply transformations to text value\n              const transformedText = this.transformUtil.applyTransforms(\n                text,\n                textContext\n              );\n\n              children.push({ [valueKey]: transformedText });\n            }\n          }\n          // CDATA sections\n          else if (\n            child.nodeType === DOMAdapter.NodeType.CDATA_SECTION_NODE &&\n            this.config.preserveCDATA\n          ) {\n            // Create CDATA context\n            const cdataContext = this.transformUtil.createContext(\n              'xml-to-json',\n              '#cdata',\n              child.nodeType,\n              {\n                path: `${currentPath}.#cdata`,\n                parent: context\n              }\n            );\n\n            // Apply transformations to CDATA value\n            const transformedCData = this.transformUtil.applyTransforms(\n              child.nodeValue || \"\",\n              cdataContext\n            );\n\n            children.push({\n              [cdataKey]: transformedCData,\n            });\n          }\n          // Comments\n          else if (\n            child.nodeType === DOMAdapter.NodeType.COMMENT_NODE &&\n            this.config.preserveComments\n          ) {\n            children.push({\n              [commentsKey]: child.nodeValue || \"\",\n            });\n          }\n          // Processing instructions\n          else if (\n            child.nodeType ===\n              DOMAdapter.NodeType.PROCESSING_INSTRUCTION_NODE &&\n            this.config.preserveProcessingInstr\n          ) {\n            children.push({\n              [instructionKey]: {\n                [targetKey]: child.nodeName,\n                [valueKey]: child.nodeValue || \"\",\n              },\n            });\n          }\n          // Element nodes (recursive)\n          else if (child.nodeType === DOMAdapter.NodeType.ELEMENT_NODE) {\n            children.push(this.nodeToJson(child, context, currentPath));\n          }\n        }\n\n        if (children.length > 0) {\n          nodeObj[childrenKey] = children;\n        }\n      }\n\n      // Apply compact option - remove empty properties if enabled\n      if (this.config.outputOptions.compact) {\n        Object.keys(nodeObj).forEach((key) => {\n          const cleaned = this.cleanNode(nodeObj[key]);\n          if (cleaned === undefined) {\n            delete nodeObj[key];\n          } else {\n            nodeObj[key] = cleaned;\n          }\n        });\n      }\n\n      result[nodeName] = nodeObj;\n    }\n\n    return result;\n  }\n\n  private cleanNode(node: any): any {\n    if (Array.isArray(node)) {\n      // Clean each item in the array and filter out empty ones\n      const cleanedArray = node\n        .map((item) => this.cleanNode(item))\n        .filter((item) => {\n          return !(\n            item === null ||\n            item === undefined ||\n            (typeof item === \"object\" && Object.keys(item).length === 0)\n          );\n        });\n      return cleanedArray.length > 0 ? cleanedArray : undefined;\n    } else if (typeof node === \"object\" && node !== null) {\n      // Clean properties recursively\n      Object.keys(node).forEach((key) => {\n        const cleanedChild = this.cleanNode(node[key]);\n        if (\n          cleanedChild === null ||\n          cleanedChild === undefined ||\n          (Array.isArray(cleanedChild) && cleanedChild.length === 0) ||\n          (typeof cleanedChild === \"object\" &&\n            Object.keys(cleanedChild).length === 0)\n        ) {\n          delete node[key];\n        } else {\n          node[key] = cleanedChild;\n        }\n      });\n\n      // Handle the special case for nodes with only empty children/attributes\n      const childrenKey = this.config.propNames.children;\n      const attrsKey = this.config.propNames.attributes;\n      const keys = Object.keys(node);\n      if (\n        keys.every((key) => key === childrenKey || key === attrsKey) &&\n        (node[childrenKey] === undefined ||\n          this.jsonUtil.isEmpty(node[childrenKey])) &&\n        (node[attrsKey] === undefined || this.jsonUtil.isEmpty(node[attrsKey]))\n      ) {\n        return undefined;\n      }\n\n      return Object.keys(node).length > 0 ? node : undefined;\n    }\n\n    return node;\n  }\n}","/**\n * XMLUtil - Utility functions for XML processing\n */\nimport { XJXError } from \"../types/error-types\";\nimport { DOMAdapter } from \"../adapters/dom-adapter\";\nimport { Configuration } from \"../types/config-types\";\n\nexport class XmlUtil {\n  private config: Configuration;\n\n  /**\n   * Constructor for XMLUtil\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n  }\n\n  /**\n   * Pretty print an XML string\n   * @param xmlString XML string to format\n   * @returns Formatted XML string\n   */\n  prettyPrintXml(xmlString: string): string {\n    const indent = this.config.outputOptions.indent;\n    const INDENT = \" \".repeat(indent);\n\n    try {\n      const doc = DOMAdapter.parseFromString(xmlString, \"text/xml\");\n\n      const serializer = (node: Node, level = 0): string => {\n        const pad = INDENT.repeat(level);\n\n        switch (node.nodeType) {\n          case DOMAdapter.NodeType.ELEMENT_NODE: {\n            const el = node as Element;\n            const tagName = el.tagName;\n            const attrs = Array.from(el.attributes)\n              .map((a) => `${a.name}=\"${a.value}\"`)\n              .join(\" \");\n            const openTag = attrs ? `<${tagName} ${attrs}>` : `<${tagName}>`;\n\n            const children = Array.from(el.childNodes);\n\n            if (children.length === 0) {\n              return `${pad}${openTag.replace(/>$/, \" />\")}\\n`;\n            }\n\n            // Single text node: print inline\n            if (\n              children.length === 0 ||\n              (children.length === 1 &&\n                children[0].nodeType === DOMAdapter.NodeType.TEXT_NODE &&\n                children[0].textContent?.trim() === \"\")\n            ) {\n              // Empty or whitespace-only\n              return `${pad}<${tagName}${attrs ? \" \" + attrs : \"\"}></${tagName}>\\n`;\n            }\n\n            const inner = children\n              .map((child) => serializer(child, level + 1))\n              .join(\"\");\n            return `${pad}${openTag}\\n${inner}${pad}</${tagName}>\\n`;\n          }\n\n          case DOMAdapter.NodeType.TEXT_NODE: {\n            const text = node.textContent?.trim();\n            return text ? `${pad}${text}\\n` : \"\";\n          }\n\n          case DOMAdapter.NodeType.CDATA_SECTION_NODE:\n            return `${pad}<![CDATA[${node.nodeValue}]]>\\n`;\n\n          case DOMAdapter.NodeType.COMMENT_NODE:\n            return `${pad}<!--${node.nodeValue}-->\\n`;\n\n          case DOMAdapter.NodeType.PROCESSING_INSTRUCTION_NODE:\n            const pi = node as ProcessingInstruction;\n            return `${pad}<?${pi.target} ${pi.data}?>\\n`;\n\n          case DOMAdapter.NodeType.DOCUMENT_NODE:\n            return Array.from(node.childNodes)\n              .map((child) => serializer(child, level))\n              .join(\"\");\n\n          default:\n            return \"\";\n        }\n      };\n\n      return serializer(doc).trim();\n    } catch (error) {\n      throw new XJXError(\n        `Failed to pretty print XML: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Check if XML string is well-formed\n   * @param xmlString XML string to validate\n   * @returns Object with validation result and any error messages\n   */\n  validateXML(xmlString: string): {\n    isValid: boolean;\n    message?: string;\n  } {\n    try {\n      const doc = DOMAdapter.parseFromString(xmlString, \"text/xml\");\n      const errors = doc.getElementsByTagName(\"parsererror\");\n      if (errors.length > 0) {\n        return {\n          isValid: false,\n          message: errors[0].textContent || \"Unknown parsing error\",\n        };\n      }\n      return { isValid: true };\n    } catch (error) {\n      return {\n        isValid: false,\n        message: error instanceof Error ? error.message : String(error),\n      };\n    }\n  }\n\n  /**\n   * Add XML declaration to a string if missing\n   * @param xmlString XML string\n   * @returns XML string with declaration\n   */\n  ensureXMLDeclaration(xmlString: string): string {\n    if (!xmlString.trim().startsWith(\"<?xml\")) {\n      return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n' + xmlString;\n    }\n    return xmlString;\n  }\n\n  /**\n   * Escapes special characters in text for safe XML usage.\n   * @param text Text to escape.\n   * @returns Escaped XML string.\n   */\n  escapeXML(text: string): string {\n    if (typeof text !== \"string\" || text.length === 0) {\n      return \"\";\n    }\n\n    return text.replace(/[&<>\"']/g, (char) => {\n      switch (char) {\n        case \"&\":\n          return \"&amp;\";\n        case \"<\":\n          return \"&lt;\";\n        case \">\":\n          return \"&gt;\";\n        case '\"':\n          return \"&quot;\";\n        case \"'\":\n          return \"&apos;\";\n        default:\n          return char;\n      }\n    });\n  }\n\n  /**\n   * Unescapes XML entities back to their character equivalents.\n   * @param text Text with XML entities.\n   * @returns Unescaped text.\n   */\n  unescapeXML(text: string): string {\n    if (typeof text !== \"string\" || text.length === 0) {\n      return \"\";\n    }\n\n    return text.replace(/&(amp|lt|gt|quot|apos);/g, (match, entity) => {\n      switch (entity) {\n        case \"amp\":\n          return \"&\";\n        case \"lt\":\n          return \"<\";\n        case \"gt\":\n          return \">\";\n        case \"quot\":\n          return '\"';\n        case \"apos\":\n          return \"'\";\n        default:\n          return match;\n      }\n    });\n  }\n\n  /**\n   * Extract the namespace prefix from a qualified name\n   * @param qualifiedName Qualified name (e.g., \"ns:element\")\n   * @returns Prefix or null if no prefix\n   */\n  extractPrefix(qualifiedName: string): string | null {\n    const colonIndex = qualifiedName.indexOf(\":\");\n    return colonIndex > 0 ? qualifiedName.substring(0, colonIndex) : null;\n  }\n\n  /**\n   * Extract the local name from a qualified name\n   * @param qualifiedName Qualified name (e.g., \"ns:element\")\n   * @returns Local name\n   */\n  extractLocalName(qualifiedName: string): string {\n    const colonIndex = qualifiedName.indexOf(\":\");\n    return colonIndex > 0\n      ? qualifiedName.substring(colonIndex + 1)\n      : qualifiedName;\n  }\n\n  /**\n   * Create a qualified name from prefix and local name\n   * @param prefix Namespace prefix (can be null)\n   * @param localName Local name\n   * @returns Qualified name\n   */\n  createQualifiedName(prefix: string | null, localName: string): string {\n    return prefix ? `${prefix}:${localName}` : localName;\n  }\n}","/**\n * JsonToXmlConverter class for converting JSON to XML with consistent namespace handling\n */\nimport { Configuration } from \"../types/config-types\";\nimport { XJXError } from \"../types/error-types\";\nimport { DOMAdapter } from \"../adapters/dom-adapter\";\nimport { XmlUtil } from \"../utils/xml-utils\";\nimport { TransformUtil } from \"../transformers/TransformUtil\";\nimport { TransformContext } from \"../transformers/ValueTransformer\";\n\n/**\n * JsonToXmlConverter for converting JSON to XML\n */\nexport class JsonToXmlConverter {\n  private config: Configuration;\n  private xmlUtil: XmlUtil;\n  private transformUtil: TransformUtil;\n\n  /**\n   * Constructor for JsonToXmlConverter\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n    this.xmlUtil = new XmlUtil(this.config);\n    this.transformUtil = new TransformUtil(this.config);\n  }\n\n  /**\n   * Convert JSON object to XML string\n   * @param jsonObj JSON object to convert\n   * @returns XML string\n   */\n  public convert(jsonObj: Record<string, any>): string {\n    try {\n      const doc = DOMAdapter.createDocument();\n      const rootElement = this.jsonToNode(jsonObj, doc);\n\n      if (rootElement) {\n        // Handle the temporary root element if it exists\n        if (doc.documentElement && doc.documentElement.nodeName === \"temp\") {\n          doc.replaceChild(rootElement, doc.documentElement);\n        } else {\n          doc.appendChild(rootElement);\n        }\n      }\n\n      // Add XML declaration if specified\n      let xmlString = DOMAdapter.serializeToString(doc);\n\n      // remove xhtml decl inserted by dom\n      xmlString = xmlString.replace(' xmlns=\"http://www.w3.org/1999/xhtml\"', '');\n\n      if (this.config.outputOptions.xml.declaration) {\n        xmlString = this.xmlUtil.ensureXMLDeclaration(xmlString);\n      }\n\n      // Apply pretty printing if enabled\n      if (this.config.outputOptions.prettyPrint) {\n        xmlString = this.xmlUtil.prettyPrintXml(xmlString);\n      }\n\n      return xmlString;\n    } catch (error) {\n      throw new XJXError(\n        `Failed to convert JSON to XML: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Convert JSON object to DOM node\n   * @param jsonObj JSON object to convert\n   * @param doc Document for creating elements\n   * @param parentContext Optional parent context for transformation chain\n   * @param path Current path in the JSON object\n   * @returns DOM Element\n   */\n  private jsonToNode(\n    jsonObj: Record<string, any>,\n    doc: Document,\n    parentContext?: TransformContext,\n    path: string = \"\"\n  ): Element | null {\n    if (!jsonObj || typeof jsonObj !== \"object\") {\n      return null;\n    }\n\n    // Get the node name (first key in the object)\n    const nodeName = Object.keys(jsonObj)[0];\n    if (!nodeName) {\n      return null;\n    }\n\n    const nodeData = jsonObj[nodeName];\n    \n    // Update the current path\n    const currentPath = path ? `${path}.${nodeName}` : nodeName;\n\n    // Create element with namespace if available\n    let element: Element;\n    const namespaceKey = this.config.propNames.namespace;\n    const prefixKey = this.config.propNames.prefix;\n    const ns = nodeData[namespaceKey];\n    const prefix = nodeData[prefixKey];\n\n    // Create context for this node\n    const context = this.transformUtil.createContext(\n      'json-to-xml',\n      nodeName,\n      DOMAdapter.NodeType.ELEMENT_NODE,\n      {\n        path: currentPath,\n        namespace: ns,\n        prefix: prefix,\n        parent: parentContext\n      }\n    );\n\n    if (ns && this.config.preserveNamespaces) {\n      if (prefix) {\n        // Create element with namespace and prefix\n        element = DOMAdapter.createElementNS(ns, `${prefix}:${nodeName}`);\n      } else {\n        // Create element with namespace but no prefix\n        element = DOMAdapter.createElementNS(ns, nodeName);\n      }\n    } else {\n      // Create element without namespace\n      element = DOMAdapter.createElement(nodeName);\n    }\n\n    // Process attributes if enabled\n    const attributesKey = this.config.propNames.attributes;\n    const valueKey = this.config.propNames.value;\n    if (\n      this.config.preserveAttributes &&\n      nodeData[attributesKey] &&\n      Array.isArray(nodeData[attributesKey])\n    ) {\n      nodeData[attributesKey].forEach(\n        (attrObj: Record<string, any>) => {\n          const attrName = Object.keys(attrObj)[0];\n          if (!attrName) return;\n\n          const attrData = attrObj[attrName];\n          \n          // Create attribute context\n          const attrContext = this.transformUtil.createContext(\n            'json-to-xml',\n            nodeName,\n            DOMAdapter.NodeType.ELEMENT_NODE,\n            {\n              path: `${currentPath}.${attrName}`,\n              namespace: attrData[namespaceKey],\n              prefix: attrData[prefixKey],\n              isAttribute: true,\n              attributeName: attrName,\n              parent: context\n            }\n          );\n          \n          // Apply transformations to attribute value\n          const transformedValue = this.transformUtil.applyTransforms(\n            attrData[valueKey] || \"\",\n            attrContext\n          );\n          \n          const attrNs = attrData[namespaceKey];\n          const attrPrefix = attrData[prefixKey];\n\n          // Form qualified name for attribute if it has a prefix\n          let qualifiedName = attrName;\n          if (attrPrefix && this.config.preserveNamespaces) {\n            qualifiedName = `${attrPrefix}:${attrName}`;\n          }\n\n          DOMAdapter.setNamespacedAttribute(\n            element, \n            (attrNs && this.config.preserveNamespaces) ? attrNs : null, \n            qualifiedName, \n            transformedValue\n          );\n        }\n      );\n    }\n\n    // Process simple text value\n    if (nodeData[valueKey] !== undefined) {\n      // Apply transformations to text value\n      const textContext = this.transformUtil.createContext(\n        'json-to-xml',\n        nodeName,\n        DOMAdapter.NodeType.TEXT_NODE,\n        {\n          path: `${currentPath}.#text`,\n          namespace: ns,\n          prefix: prefix,\n          parent: context\n        }\n      );\n      \n      const transformedValue = this.transformUtil.applyTransforms(\n        nodeData[valueKey],\n        textContext\n      );\n      \n      element.textContent = transformedValue;\n    }\n\n    // Process children\n    const childrenKey = this.config.propNames.children;\n    const cdataKey = this.config.propNames.cdata;\n    const commentsKey = this.config.propNames.comments;\n    const instructionKey = this.config.propNames.instruction;\n    const targetKey = this.config.propNames.target;\n\n    if (\n      nodeData[childrenKey] &&\n      Array.isArray(nodeData[childrenKey])\n    ) {\n      nodeData[childrenKey].forEach(\n        (child: Record<string, any>) => {\n          // Text nodes\n          if (\n            child[valueKey] !== undefined &&\n            this.config.preserveTextNodes\n          ) {\n            // Apply transformations to text node\n            const textContext = this.transformUtil.createContext(\n              'json-to-xml',\n              '#text',\n              DOMAdapter.NodeType.TEXT_NODE,\n              {\n                path: `${currentPath}.#text`,\n                parent: context\n              }\n            );\n            \n            const transformedText = this.transformUtil.applyTransforms(\n              child[valueKey],\n              textContext\n            );\n            \n            element.appendChild(\n              DOMAdapter.createTextNode(this.xmlUtil.escapeXML(transformedText))\n            );\n          }\n          // CDATA sections\n          else if (\n            child[cdataKey] !== undefined &&\n            this.config.preserveCDATA\n          ) {\n            // Apply transformations to CDATA\n            const cdataContext = this.transformUtil.createContext(\n              'json-to-xml',\n              '#cdata',\n              DOMAdapter.NodeType.CDATA_SECTION_NODE,\n              {\n                path: `${currentPath}.#cdata`,\n                parent: context\n              }\n            );\n            \n            const transformedCData = this.transformUtil.applyTransforms(\n              child[cdataKey],\n              cdataContext\n            );\n            \n            element.appendChild(\n              DOMAdapter.createCDATASection(\n                transformedCData\n              )\n            );\n          }\n          // Comments\n          else if (\n            child[commentsKey] !== undefined &&\n            this.config.preserveComments\n          ) {\n            element.appendChild(\n              DOMAdapter.createComment(\n                child[commentsKey]\n              )\n            );\n          }\n          // Processing instructions\n          else if (\n            child[instructionKey] !== undefined &&\n            this.config.preserveProcessingInstr\n          ) {\n            const piData = child[instructionKey];\n            const target = piData[targetKey];\n            const data = piData[valueKey] || \"\";\n\n            if (target) {\n              element.appendChild(\n                DOMAdapter.createProcessingInstruction(target, data)\n              );\n            }\n          }\n          // Element nodes (recursive)\n          else {\n            const childElement = this.jsonToNode(child, doc, context, currentPath);\n            if (childElement) {\n              element.appendChild(childElement);\n            }\n          }\n        }\n      );\n    }\n\n    return element;\n  }\n}","/**\n * Default configuration for the XJX library\n */\nimport { Configuration } from '../types/config-types';\n\n/**\n * Default configuration\n */\nexport const DEFAULT_CONFIG: Configuration = {\n  preserveNamespaces: true,\n  preserveComments: true,\n  preserveProcessingInstr: true,\n  preserveCDATA: true,\n  preserveTextNodes: true,\n  preserveWhitespace: false,\n  preserveAttributes: true,\n\n  outputOptions: {\n    prettyPrint: true,\n    indent: 2,\n    compact: true,\n    json: {},\n    xml: {\n      declaration: true,\n    },\n  },\n\n  propNames: {\n    namespace: \"$ns\",\n    prefix: \"$pre\",\n    attributes: \"$attr\",\n    value: \"$val\",\n    cdata: \"$cdata\",\n    comments: \"$cmnt\",\n    instruction: \"$pi\", \n    target: \"$trgt\",  \n    children: \"$children\",\n  },\n};","/**\n * XJX - Facade class for XML-JSON conversion operations\n */\nimport { XmlToJsonConverter } from \"./core/converters/xml-to-json-converter\";\nimport { JsonToXmlConverter } from \"./core/converters/json-to-xml-converter\";\nimport { Configuration } from \"./core/types/config-types\";\nimport { DEFAULT_CONFIG } from \"./core/config/config\";\nimport { DOMAdapter } from \"./core/adapters/dom-adapter\";\nimport { XmlUtil } from \"./core/utils/xml-utils\";\nimport { JsonUtil } from \"./core/utils/json-utils\";\nimport { ValueTransformer } from \"./core/transformers\";\n\nexport class XJX {\n  private config: Configuration;\n  private xmlToJsonConverter: XmlToJsonConverter;\n  private jsonToXmlConverter: JsonToXmlConverter;\n  private jsonUtil: JsonUtil;\n  private xmlUtil: XmlUtil;\n\n  /**\n   * Constructor for XJX utility\n   * @param config Configuration options\n   */\n  constructor(config: Partial<Configuration> = {}) {\n    // First create a jsonUtil instance with default config to use its methods\n    this.jsonUtil = new JsonUtil(DEFAULT_CONFIG);\n\n    // Create a deep clone of the default config\n    const defaultClone = this.jsonUtil.deepClone(DEFAULT_CONFIG);\n\n    // Deep merge with the provided config\n    this.config = this.jsonUtil.deepMerge<Configuration>(defaultClone, config);\n\n    // Re-initialize jsonUtil with the merged config\n    this.jsonUtil = new JsonUtil(this.config);\n\n    // Initialize other components\n    this.xmlUtil = new XmlUtil(this.config);\n    this.xmlToJsonConverter = new XmlToJsonConverter(this.config);\n    this.jsonToXmlConverter = new JsonToXmlConverter(this.config);\n  }\n\n  /**\n   * Convert XML string to JSON\n   * @param xmlString XML content as string\n   * @returns JSON object representing the XML content\n   */\n  public xmlToJson(xmlString: string): Record<string, any> {\n    return this.xmlToJsonConverter.convert(xmlString);\n  }\n\n  /**\n   * Convert JSON object back to XML string\n   * @param jsonObj JSON object to convert\n   * @returns XML string\n   */\n  public jsonToXml(jsonObj: Record<string, any>): string {\n    return this.jsonToXmlConverter.convert(jsonObj);\n  }\n\n  /**\n   * Pretty print an XML string\n   * @param xmlString XML string to format\n   * @returns Formatted XML string\n   */\n  public prettyPrintXml(xmlString: string): string {\n    return this.xmlUtil.prettyPrintXml(xmlString);\n  }\n\n  /**\n   * Safely retrieves a value from a JSON object using a dot-separated path.\n   * @param obj The input JSON object\n   * @param path The dot-separated path string (e.g., \"root.item.description.$val\")\n   * @param fallback Value to return if the path does not resolve\n   * @returns The value at the specified path or the fallback value\n   */\n  public getPath(\n    obj: Record<string, any>,\n    path: string,\n    fallback: any = undefined\n  ): any {\n    return this.jsonUtil.getPath(obj, path, fallback);\n  }\n\n  /**\n   * Validate XML string\n   * @param xmlString XML string to validate\n   * @returns Validation result\n   */\n  public validateXML(xmlString: string): {\n    isValid: boolean;\n    message?: string;\n  } {\n    return this.xmlUtil.validateXML(xmlString);\n  }\n\n  /**\n   * Generate a JSON schema based on the current configuration\n   * @returns JSON schema object for validating XML-JSON documents\n   */\n  public generateJsonSchema(): Record<string, any> {\n    return this.jsonUtil.generateJsonSchema();\n  }\n\n  /**\n   * Convert a standard JSON object to the XML-like JSON structure\n   * @param obj Standard JSON object\n   * @param root Optional root element configuration (string or object with properties)\n   * @returns XML-like JSON object ready for conversion to XML\n   */\n  public objectToXJX(obj: any, root?: string | Record<string, any>): Record<string, any> {\n    return this.jsonUtil.objectToXJX(obj, root);\n  }\n\n  /**\n   * Generate an example JSON object that matches the current configuration\n   * @param rootName Name of the root element\n   * @returns Example JSON object\n   */\n  public generateJsonExample(rootName: string = \"root\"): Record<string, any> {\n    return this.jsonUtil.generateExample(rootName);\n  }\n\n  /**\n   * Add a value transformer to the configuration\n   * @param transformer Value transformer to add\n   * @returns This XJX instance for chaining\n   */\n  public addTransformer(transformer: ValueTransformer): XJX {\n    if (!this.config.valueTransforms) {\n      this.config.valueTransforms = [];\n    }\n    this.config.valueTransforms.push(transformer);\n    return this;\n  }\n\n  /**\n   * Removes all value transformers from the configuration\n   * @returns This XJX instance for chaining\n   */\n  public clearTransformers(): XJX {\n    this.config.valueTransforms = [];\n    return this;\n  }\n\n  /**\n   * Clean up any resources\n   */\n  public cleanup(): void {\n    DOMAdapter.cleanup();\n  }\n}","/**\n * Value transformation types and base class for the XJX library\n */\nimport { Configuration } from '../types/config-types';\n\n/**\n * Direction of the transformation\n */\nexport type TransformDirection = 'xml-to-json' | 'json-to-xml';\n\n/**\n * Context provided to value transformers\n */\nexport interface TransformContext {\n  // Core transformation info\n  direction: TransformDirection;  // Direction of the current transformation\n  \n  // Node information\n  nodeName: string;              // Name of the current node\n  nodeType: number;              // DOM node type (element, text, etc.)\n  namespace?: string;            // Namespace URI if available\n  prefix?: string;               // Namespace prefix if available\n  \n  // Structure information\n  path: string;                  // Dot-notation path to current node\n  isAttribute: boolean;          // Whether the current value is from an attribute\n  attributeName?: string;        // Name of attribute if isAttribute is true\n  \n  // Parent context (creates a chain)\n  parent?: TransformContext;     // Reference to parent context for traversal\n  \n  // Configuration reference\n  config: Configuration;         // Reference to the current configuration\n}\n\n/**\n * Abstract base class for value transformers\n */\nexport abstract class ValueTransformer {\n  /**\n   * Process a value, transforming it if applicable\n   * @param value Value to potentially transform\n   * @param context Context including direction and other information\n   * @returns Transformed value or original if not applicable\n   */\n  process(value: any, context: TransformContext): any {\n    if (context.direction === 'xml-to-json') {\n      return this.xmlToJson(value, context);\n    } else {\n      return this.jsonToXml(value, context);\n    }\n  }\n\n  /**\n   * Transform a value from XML to JSON representation\n   * @param value Value from XML\n   * @param context Transformation context\n   * @returns Transformed value for JSON\n   */\n  protected xmlToJson(value: any, context: TransformContext): any {\n    // Default implementation returns original value\n    return value;\n  }\n\n  /**\n   * Transform a value from JSON to XML representation\n   * @param value Value from JSON\n   * @param context Transformation context\n   * @returns Transformed value for XML\n   */\n  protected jsonToXml(value: any, context: TransformContext): any {\n    // Default implementation returns original value\n    return value;\n  }\n}"],"names":["XJXError","Error","constructor","message","super","this","name","NodeType","DOMAdapter","domParser","xmlSerializer","docImplementation","jsdomInstance","window","JSDOM","require","contentType","DOMParser","XMLSerializer","document","implementation","jsdomError","DOMImplementation","xmldomError","error","String","createParser","createSerializer","parseFromString","xmlString","serializeToString","node","createDocument","createElement","tagName","createElementNS","namespaceURI","qualifiedName","createTextNode","data","createCDATASection","createComment","createProcessingInstruction","target","setNamespacedAttribute","element","value","setAttributeNS","setAttribute","isNode","obj","nodeType","getNodeTypeName","ELEMENT_NODE","TEXT_NODE","CDATA_SECTION_NODE","COMMENT_NODE","PROCESSING_INSTRUCTION_NODE","getNodeAttributes","result","i","attributes","length","attr","cleanup","close","JsonUtil","config","getPath","path","fallback","segments","split","current","segment","Array","isArray","results","map","item","resolveSegment","flat","filter","v","undefined","propNames","children","namespace","prefix","cdata","comments","instruction","configKey","Object","entries","find","_","matches","child","objectToXJX","root","wrappedObject","wrapObject","elementName","attrsKey","childrenKey","nsKey","valKey","key","val","isEmpty","keys","safeStringify","indent","JSON","stringify","deepClone","parse","deepMerge","source","forEach","sourceValue","targetValue","generateJsonSchema","compact","outputOptions","preserveNamespaces","preserveComments","preserveCDATA","preserveProcessingInstr","preserveTextNodes","preserveAttributes","preserveWhitespace","requiredProps","push","elementProperties","description","type","items","patternProperties","properties","required","additionalProperties","attrProps","$ref","$schema","title","definitions","generateExample","rootName","example","id","lang","unshift","TransformUtil","applyTransforms","context","valueTransforms","transformedValue","transformer","process","createContext","direction","nodeName","options","isAttribute","attributeName","parent","XmlToJsonConverter","jsonUtil","transformUtil","convert","xmlDoc","errors","getElementsByTagName","textContent","nodeToJson","documentElement","parentContext","localName","pop","currentPath","nodeObj","ns","attrs","attrLocalName","attrContext","attrObj","childNodes","valueKey","cdataKey","commentsKey","instructionKey","targetKey","text","nodeValue","trim","textContext","transformedText","cdataContext","transformedCData","cleaned","cleanNode","cleanedArray","cleanedChild","every","XmlUtil","prettyPrintXml","INDENT","repeat","doc","serializer","level","pad","el","from","a","join","openTag","replace","pi","DOCUMENT_NODE","validateXML","isValid","ensureXMLDeclaration","startsWith","escapeXML","char","unescapeXML","match","entity","extractPrefix","colonIndex","indexOf","substring","extractLocalName","createQualifiedName","JsonToXmlConverter","xmlUtil","jsonObj","rootElement","jsonToNode","replaceChild","appendChild","xml","declaration","prettyPrint","nodeData","namespaceKey","prefixKey","attributesKey","attrName","attrData","attrNs","attrPrefix","piData","childElement","DEFAULT_CONFIG","json","XJX","defaultClone","xmlToJsonConverter","jsonToXmlConverter","xmlToJson","jsonToXml","generateJsonExample","addTransformer","clearTransformers"],"mappings":"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"}