{"version":3,"file":"xjx.umd.js","sources":["../../src/core/types/error-types.ts","../../src/core/types/dom-types.ts","../../src/core/adapters/dom-adapter.ts","../../src/core/utils/json-utils.ts","../../src/core/transformers/TransformUtil.ts","../../src/core/converters/xml-to-json-converter.ts","../../src/core/utils/xml-utils.ts","../../src/core/converters/json-to-xml-converter.ts","../../src/core/config/config.ts","../../src/XJX.ts","../../src/core/transformers/ValueTransformer.ts","../../src/index.ts"],"sourcesContent":["/**\n * Error classes for the XJX library\n */\n\n/**\n * Base error class\n */\nexport class XJXError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'XMLToJSONError';\n  }\n}\n\n/**\n * Error for XML parsing issues\n */\nexport class XmlToJsonError extends XJXError {\n  constructor(message: string) {\n    super(`XML parse error: ${message}`);\n    this.name = 'XmlToJsonError';\n  }\n}\n\n/**\n * Error for XML serialization issues\n */\nexport class JsonToXmlError extends XJXError {\n  constructor(message: string) {\n    super(`XML serialization error: ${message}`);\n    this.name = 'JsonToXmlError';\n  }\n}\n\n/**\n * Error for environment incompatibility\n */\nexport class EnvironmentError extends XJXError {\n  constructor(message: string) {\n    super(`Environment error: ${message}`);\n    this.name = 'EnvironmentError';\n  }\n}\n\n/**\n * Error for invalid configuration\n */\nexport class ConfigurationError extends XJXError {\n  constructor(message: string) {\n    super(`Configuration error: ${message}`);\n    this.name = 'ConfigurationError';\n  }\n}","/**\n * DOM node types as an enum for better type safety\n */\nexport enum NodeType {\n    ELEMENT_NODE = 1,\n    ATTRIBUTE_NODE = 2,\n    TEXT_NODE = 3, \n    CDATA_SECTION_NODE = 4,\n    PROCESSING_INSTRUCTION_NODE = 7,\n    COMMENT_NODE = 8,\n    DOCUMENT_NODE = 9\n  }","/**\n * DOM Environment provider with unified interface for browser and Node.js\n */\nimport { XJXError } from '../types/error-types';\nimport { NodeType } from '../types/dom-types';\n\n\ninterface DOMWindow {\n  DOMParser: any;\n  XMLSerializer: any;\n  // Node: {\n  //   ELEMENT_NODE: number;\n  //   TEXT_NODE: number;\n  //   CDATA_SECTION_NODE: number;\n  //   COMMENT_NODE: number;\n  //   PROCESSING_INSTRUCTION_NODE: number;\n  //   DOCUMENT_NODE: number; \n  // };\n  document: Document;\n  close?: () => void; \n}\n\ninterface JSDOMInstance {\n  window: DOMWindow;\n}\n\nexport const DOMAdapter = (() => {\n  // Environment-specific DOM implementation\n  let domParser: any;\n  let xmlSerializer: any;\n  // let nodeTypes: NodeTypes;\n  let docImplementation: any;\n  let jsdomInstance: JSDOMInstance | null = null;\n\n  try {\n    if (typeof window === \"undefined\") {\n      // Node.js environment - try JSDOM first\n      try {\n        const { JSDOM } = require(\"jsdom\");\n        jsdomInstance = new JSDOM(\"<!DOCTYPE html><html><body></body></html>\", {\n          contentType: \"text/xml\",\n        }) as JSDOMInstance;\n\n        domParser = jsdomInstance.window.DOMParser;\n        xmlSerializer = jsdomInstance.window.XMLSerializer;\n        // nodeTypes = {\n        //   ELEMENT_NODE: jsdomInstance.window.Node.ELEMENT_NODE,\n        //   TEXT_NODE: jsdomInstance.window.Node.TEXT_NODE,\n        //   CDATA_SECTION_NODE: jsdomInstance.window.Node.CDATA_SECTION_NODE,\n        //   COMMENT_NODE: jsdomInstance.window.Node.COMMENT_NODE,\n        //   PROCESSING_INSTRUCTION_NODE: jsdomInstance.window.Node.PROCESSING_INSTRUCTION_NODE,\n        //   DOCUMENT_NODE: jsdomInstance.window.Node.DOCUMENT_NODE, // Add this line\n        // };\n        docImplementation = jsdomInstance.window.document.implementation;\n      } catch (jsdomError) {\n        // Fall back to xmldom if JSDOM isn't available\n        try {\n          const { DOMParser, XMLSerializer, DOMImplementation } = require('@xmldom/xmldom');\n          domParser = DOMParser;\n          xmlSerializer = XMLSerializer;\n          // Standard DOM node types\n          // nodeTypes = {\n          //   ELEMENT_NODE: 1,\n          //   TEXT_NODE: 3,\n          //   CDATA_SECTION_NODE: 4,\n          //   COMMENT_NODE: 8,\n          //   PROCESSING_INSTRUCTION_NODE: 7,\n          //   DOCUMENT_NODE: 9, \n          // };\n          const implementation = new DOMImplementation();\n          docImplementation = implementation;\n        } catch (xmldomError) {\n          throw new XJXError(`Node.js environment detected but neither 'jsdom' nor '@xmldom/xmldom' are available.`);\n        }\n      }\n    } else {\n      // Browser environment\n      if (!window.DOMParser) {\n        throw new XJXError(\"DOMParser is not available in this environment\");\n      }\n\n      if (!window.XMLSerializer) {\n        throw new XJXError(\"XMLSerializer is not available in this environment\");\n      }\n\n      domParser = window.DOMParser;\n      xmlSerializer = window.XMLSerializer;\n      // nodeTypes = {\n      //   ELEMENT_NODE: Node.ELEMENT_NODE,\n      //   TEXT_NODE: Node.TEXT_NODE,\n      //   CDATA_SECTION_NODE: Node.CDATA_SECTION_NODE,\n      //   COMMENT_NODE: Node.COMMENT_NODE,\n      //   PROCESSING_INSTRUCTION_NODE: Node.PROCESSING_INSTRUCTION_NODE,\n      //   DOCUMENT_NODE: Node.DOCUMENT_NODE, \n      // };\n      docImplementation = document.implementation;\n    }\n  } catch (error) {\n    throw new XJXError(`DOM environment initialization failed: ${error instanceof Error ? error.message : String(error)}`);\n  }\n\n  return {\n    createParser: () => {\n      try {\n        return new domParser();\n      } catch (error) {\n        throw new XJXError(`Failed to create DOM parser: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createSerializer: () => {\n      try {\n        return new xmlSerializer();\n      } catch (error) {\n        throw new XJXError(`Failed to create XML serializer: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    NodeType,\n    \n    parseFromString: (xmlString: string, contentType: string = 'text/xml') => {\n      try {\n        const parser = new domParser();\n        return parser.parseFromString(xmlString, contentType);\n      } catch (error) {\n        throw new XJXError(`Failed to parse XML: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    serializeToString: (node: Node) => {\n      try {\n        const serializer = new xmlSerializer();\n        return serializer.serializeToString(node);\n      } catch (error) {\n        throw new XJXError(`Failed to serialize XML: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createDocument: () => {\n      try {\n        // For browsers, create a document with a root element to avoid issues\n        if (typeof window !== \"undefined\") {\n          const parser = new domParser();\n          return parser.parseFromString('<temp></temp>', 'text/xml');\n        } else {\n          return docImplementation.createDocument(null, null, null);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create document: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createElement: (tagName: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createElement(tagName);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createElement(tagName);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create element: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createElementNS: (namespaceURI: string, qualifiedName: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createElementNS(namespaceURI, qualifiedName);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createElementNS(namespaceURI, qualifiedName);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create element with namespace: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createTextNode: (data: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createTextNode(data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createTextNode(data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create text node: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createCDATASection: (data: string) => {\n      try {\n        // For browser compatibility, use document.implementation to create CDATA\n        if (typeof window !== \"undefined\") {\n          const doc = document.implementation.createDocument(null, null, null);\n          return doc.createCDATASection(data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createCDATASection(data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create CDATA section: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createComment: (data: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          return document.createComment(data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createComment(data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create comment: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    createProcessingInstruction: (target: string, data: string) => {\n      try {\n        if (typeof window !== \"undefined\") {\n          const doc = document.implementation.createDocument(null, null, null);\n          return doc.createProcessingInstruction(target, data);\n        } else {\n          const doc = docImplementation.createDocument(null, null, null);\n          return doc.createProcessingInstruction(target, data);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to create processing instruction: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    // New helper methods\n    \n    /**\n     * Creates a proper namespace qualified attribute\n     */\n    setNamespacedAttribute: (element: Element, namespaceURI: string | null, qualifiedName: string, value: string): void => {\n      try {\n        if (namespaceURI) {\n          element.setAttributeNS(namespaceURI, qualifiedName, value);\n        } else {\n          element.setAttribute(qualifiedName, value);\n        }\n      } catch (error) {\n        throw new XJXError(`Failed to set attribute: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    \n    /**\n     * Check if an object is a DOM node\n     */\n    isNode: (obj: any): boolean => {\n      try {\n        return obj && typeof obj === 'object' && typeof obj.nodeType === 'number';\n      } catch (error) {\n        return false;\n      }\n    },\n    \n    /**\n     * Get DOM node type as string for debugging\n     */\n    getNodeTypeName: (nodeType: number): string => {\n      switch (nodeType) {\n        case NodeType.ELEMENT_NODE: return 'ELEMENT_NODE';\n        case NodeType.TEXT_NODE: return 'TEXT_NODE';\n        case NodeType.CDATA_SECTION_NODE: return 'CDATA_SECTION_NODE';\n        case NodeType.COMMENT_NODE: return 'COMMENT_NODE';\n        case NodeType.PROCESSING_INSTRUCTION_NODE: return 'PROCESSING_INSTRUCTION_NODE';\n        default: return `UNKNOWN_NODE_TYPE(${nodeType})`;\n      }\n    },\n    \n    /**\n     * Get all node attributes as an object\n     */\n    getNodeAttributes: (node: Element): Record<string, string> => {\n      const result: Record<string, string> = {};\n      for (let i = 0; i < node.attributes.length; i++) {\n        const attr = node.attributes[i];\n        result[attr.name] = attr.value;\n      }\n      return result;\n    },\n    \n    // Cleanup method (mainly for JSDOM)\n    cleanup: () => {\n      if (jsdomInstance && typeof jsdomInstance.window.close === 'function') {\n        jsdomInstance.window.close();\n      }\n    }\n  };\n})();","/**\n * JSONUtil - Utility functions for JSON processing\n */\nimport { Configuration } from \"../types/config-types\";\nimport { JSONValue } from \"../types/json-types\";\n\nexport class JsonUtil {\n  private config: Configuration;\n\n  /**\n   * Constructor for JSONUtil\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n  }\n\n  /**\n   * Safely retrieves a value from a JSON object using a dot-separated path.\n   * Automatically traverses into children arrays and flattens results.\n   *\n   * @param obj The input JSON object\n   * @param path The dot-separated path string (e.g., \"root.item.description.$val\")\n   * @param fallback Value to return if the path does not resolve\n   * @returns Retrieved value or fallback\n   */\n  getPath(\n    obj: Record<string, any>,\n    path: string,\n    fallback?: JSONValue\n  ): any {\n    const segments = path.split(\".\");\n    let current: any = obj;\n\n    for (const segment of segments) {\n      if (Array.isArray(current)) {\n        // Apply the segment to each array element and flatten results\n        const results = current\n          .map((item) => this.resolveSegment(item, segment))\n          .flat()\n          .filter((v) => v !== undefined);\n        current = results.length > 0 ? results : undefined;\n      } else {\n        current = this.resolveSegment(current, segment);\n      }\n\n      if (current === undefined) return fallback;\n    }\n\n    // Collapse singleton arrays\n    if (Array.isArray(current) && current.length === 1) {\n      return current[0];\n    }\n\n    return current !== undefined ? current : fallback;\n  }\n\n  /**\n   * Resolves a single path segment in the context of a JSON object.\n   * Falls back to searching children for matching keys.\n   *\n   * @param obj The current object\n   * @param segment The path segment to resolve\n   * @returns Resolved value or undefined\n   */\n  private resolveSegment(obj: any, segment: string): any {\n    if (obj == null || typeof obj !== \"object\") return undefined;\n\n    // Direct property access\n    if (segment in obj) {\n      return obj[segment];\n    }\n\n    // Check if this is a special property name that matches the config\n    if (\n      segment === this.config.propNames.value ||\n      segment === this.config.propNames.children ||\n      segment === this.config.propNames.attributes ||\n      segment === this.config.propNames.namespace ||\n      segment === this.config.propNames.prefix ||\n      segment === this.config.propNames.cdata ||\n      segment === this.config.propNames.comments ||\n      segment === this.config.propNames.instruction ||\n      segment === this.config.propNames.target\n    ) {\n      const configKey = Object.entries(this.config.propNames).find(\n        ([_, value]) => value === segment\n      )?.[0];\n\n      if (configKey && obj[segment] !== undefined) {\n        return obj[segment];\n      }\n    }\n\n    // Check children for objects that contain the segment\n    const childrenKey = this.config.propNames.children;\n    const children = obj[childrenKey];\n    if (Array.isArray(children)) {\n      const matches = children\n        .map((child) => (segment in child ? child[segment] : undefined))\n        .filter((v) => v !== undefined);\n      return matches.length > 0 ? matches : undefined;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Converts a plain JSON object to the XML-like JSON structure.\n   * Optionally wraps the result in a root element with attributes and namespaces.\n   *\n   * @param obj Standard JSON object\n   * @param root Optional root element configuration (either a string or object with $ keys)\n   * @returns XML-like JSON object\n   */\n  objectToXJX(obj: any, root?: any): any {\n    const wrappedObject = this.wrapObject(obj);\n\n    if (typeof root === \"string\") {\n      // Root is a simple string: wrap result with this root tag\n      return { [root]: wrappedObject };\n    }\n\n    if (root && typeof root === \"object\") {\n      // Handle root with config-based keys\n      const elementName = root.name || \"root\"; // Default to \"root\" if no name is provided\n      const prefix = root[this.config.propNames.prefix] || \"\";\n      const qualifiedName = prefix ? `${prefix}:${elementName}` : elementName;\n\n      const result: any = {\n        [qualifiedName]: {},\n      };\n\n      // Add attributes to the root element if defined\n      const attrsKey = this.config.propNames.attributes;\n      if (root[attrsKey] && Array.isArray(root[attrsKey])) {\n        result[qualifiedName][attrsKey] = root[attrsKey];\n      }\n\n      // Merge existing children with the new generated children\n      const childrenKey = this.config.propNames.children;\n      const children = root[childrenKey] ? root[childrenKey] : [];\n      result[qualifiedName][childrenKey] = [\n        ...children,\n        { [elementName]: wrappedObject },\n      ];\n\n      // Add namespace and prefix if defined\n      const nsKey = this.config.propNames.namespace;\n      if (root[nsKey]) {\n        result[qualifiedName][nsKey] = root[nsKey];\n      }\n\n      if (prefix && root[nsKey]) {\n        result[qualifiedName][`xmlns:${prefix}`] = root[nsKey];\n      }\n\n      return result;\n    }\n\n    // Default behavior if no root is provided\n    return wrappedObject;\n  }\n\n  /**\n   * Wraps a standard JSON value in the XML-like JSON structure\n   * @param value Value to wrap\n   * @returns Wrapped value\n   */\n  private wrapObject(value: any): any {\n    const valKey = this.config.propNames.value;\n    const childrenKey = this.config.propNames.children;\n\n    if (\n      value === null ||\n      typeof value === \"string\" ||\n      typeof value === \"number\" ||\n      typeof value === \"boolean\"\n    ) {\n      return { [valKey]: value };\n    }\n\n    if (Array.isArray(value)) {\n      // For arrays, wrap each item and return as a children-style array of repeated elements\n      return {\n        [childrenKey]: value.map((item) => {\n          return this.wrapObject(item);\n        }),\n      };\n    }\n\n    if (typeof value === \"object\") {\n      // It's an object: wrap its properties in children\n      const children = Object.entries(value).map(([key, val]) => ({\n        [key]: this.wrapObject(val),\n      }));\n\n      return { [childrenKey]: children };\n    }\n\n    return undefined; // Fallback for unhandled types\n  }\n\n  /**\n   * Check if an object is empty\n   * @param value Value to check\n   * @returns true if empty\n   */\n  isEmpty(value: any): boolean {\n    if (value == null) return true;\n    if (Array.isArray(value)) return value.length === 0;\n    if (typeof value === \"object\") return Object.keys(value).length === 0;\n    return false;\n  }\n\n  /**\n   * Safely stringify JSON for debugging\n   * @param obj Object to stringify\n   * @param indent Optional indentation level\n   * @returns JSON string representation\n   */\n  safeStringify(obj: any, indent: number = 2): string {\n    try {\n      return JSON.stringify(obj, null, indent);\n    } catch (error) {\n      return \"[Cannot stringify object]\";\n    }\n  }\n\n  /**\n   * Deep clone an object\n   * @param obj Object to clone\n   * @returns Cloned object\n   */\n  deepClone(obj: any): any {\n    try {\n      return JSON.parse(JSON.stringify(obj));\n    } catch (error) {\n      throw new Error(\n        `Failed to deep clone object: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Deep merge two objects with proper type handling\n   * @param target Target object\n   * @param source Source object\n   * @returns Merged object (target is modified)\n   */\n  deepMerge<T>(target: T, source: Partial<T>): T {\n    if (!source || typeof source !== \"object\" || source === null) {\n      return target;\n    }\n\n    if (!target || typeof target !== \"object\" || target === null) {\n      return source as unknown as T;\n    }\n\n    Object.keys(source).forEach((key) => {\n      const sourceValue = source[key as keyof Partial<T>];\n      const targetValue = target[key as keyof T];\n\n      // If both source and target values are objects, recursively merge them\n      if (\n        sourceValue !== null &&\n        targetValue !== null &&\n        typeof sourceValue === \"object\" &&\n        typeof targetValue === \"object\" &&\n        !Array.isArray(sourceValue) &&\n        !Array.isArray(targetValue)\n      ) {\n        // Recursively merge the nested objects\n        (target as any)[key] = this.deepMerge(targetValue, sourceValue as any);\n      } else {\n        // Otherwise just replace the value\n        (target as any)[key] = sourceValue;\n      }\n    });\n\n    return target;\n  }\n\n  /**\n   * Generates a JSON schema that matches the current configuration\n   * @returns JSON schema object\n   */\n  generateJsonSchema(): Record<string, any> {\n    try {\n      const propNames = this.config.propNames;\n      const compact = this.config.outputOptions.compact || false;\n      const preserveNamespaces = this.config.preserveNamespaces;\n      const preserveComments = this.config.preserveComments;\n      const preserveCDATA = this.config.preserveCDATA;\n      const preserveProcessingInstr = this.config.preserveProcessingInstr;\n      const preserveTextNodes = this.config.preserveTextNodes;\n      const preserveWhitespace = this.config.preserveWhitespace;\n      const preserveAttributes = this.config.preserveAttributes;\n\n      // Determine which properties are required based on the configuration\n      const requiredProps: string[] = [];\n\n      if (!compact) {\n        // Only add collections as required if they're preserved in the config\n        if (preserveAttributes) requiredProps.push(propNames.attributes);\n\n        if (preserveCDATA) requiredProps.push(propNames.cdata);\n        if (preserveComments) requiredProps.push(propNames.comments);\n        if (preserveProcessingInstr) requiredProps.push(propNames.instruction);\n        requiredProps.push(propNames.children);\n\n        if (preserveTextNodes) {\n          requiredProps.push(propNames.value);\n\n          if (preserveNamespaces) {\n            requiredProps.push(propNames.namespace);\n            // Note: prefix is not required as it may not be present for all elements\n          }\n        }\n      }\n\n      // Create schema for element properties\n      const elementProperties: Record<string, any> = {};\n\n      // Add namespace property if preserving namespaces\n      if (preserveNamespaces) {\n        elementProperties[propNames.namespace] = {\n          description: \"Namespace URI of the element\",\n          type: \"string\",\n        };\n\n        // Add prefix property if preserving namespaces\n        elementProperties[propNames.prefix] = {\n          description: \"Namespace prefix of the element\",\n          type: \"string\",\n        };\n      }\n\n      // Add value property if preserving text nodes\n      if (preserveTextNodes) {\n        elementProperties[propNames.value] = {\n          description: \"Text content of the element\",\n          type: \"string\",\n        };\n      }\n\n      // Add attributes property\n      if (preserveAttributes) {\n        elementProperties[propNames.attributes] = {\n          description: \"Element attributes\",\n          type: \"array\",\n          items: {\n            type: \"object\",\n            patternProperties: {\n              \"^.*$\": {\n                type: \"object\",\n                properties: {\n                  [propNames.value]: {\n                    description: \"Attribute value\",\n                    type: \"string\",\n                  },\n                },\n                required: [propNames.value],\n              },\n            },\n            additionalProperties: false,\n          },\n        };\n\n        // If preserving namespaces, add namespace properties to attribute schema\n        if (preserveNamespaces) {\n          const attrProps =\n            elementProperties[propNames.attributes].items.patternProperties[\n              \"^.*$\"\n            ].properties;\n\n          attrProps[propNames.namespace] = {\n            description: \"Namespace URI of the attribute\",\n            type: \"string\",\n          };\n\n          attrProps[propNames.prefix] = {\n            description: \"Namespace prefix of the attribute\",\n            type: \"string\",\n          };\n        }\n      }\n\n      // Add CDATA property if preserving CDATA\n      if (preserveCDATA) {\n        elementProperties[propNames.cdata] = {\n          description: \"CDATA section content\",\n          type: \"string\",\n        };\n      }\n\n      // Add comments property if preserving comments\n      if (preserveComments) {\n        elementProperties[propNames.comments] = {\n          description: \"Comment content\",\n          type: \"string\",\n        };\n      }\n\n      // Add processing instructions property if preserving them\n      if (preserveProcessingInstr) {\n        elementProperties[propNames.instruction] = {\n          description: \"Processing instruction\",\n          type: \"object\",\n          properties: {\n            [propNames.target]: {\n              description: \"Processing instruction target\",\n              type: \"string\",\n            },\n            [propNames.value]: {\n              description: \"Processing instruction content\",\n              type: \"string\",\n            },\n          },\n          required: [propNames.target],\n        };\n      }\n\n      // Add children property with recursive schema\n      elementProperties[propNames.children] = {\n        description: \"Child elements\",\n        type: \"array\",\n        items: {\n          type: \"object\",\n          patternProperties: {\n            \"^.*$\": {\n              $ref: \"#/definitions/element\",\n            },\n          },\n          additionalProperties: false,\n        },\n      };\n\n      // Create element definition (will be referenced recursively)\n      const elementDefinition = {\n        type: \"object\",\n        properties: elementProperties,\n        required: requiredProps,\n        additionalProperties: false,\n      };\n\n      // Build the complete schema\n      const schema = {\n        $schema: \"https://json-schema.org/draft/2020-12/schema\",\n        title: \"XJX JSON Schema\",\n        description:\n          \"Schema for JSON representation of XML documents using the XJX library\",\n        type: \"object\",\n        patternProperties: {\n          \"^.*$\": {\n            $ref: \"#/definitions/element\",\n          },\n        },\n        additionalProperties: false,\n        definitions: {\n          element: elementDefinition,\n        },\n      };\n\n      return schema;\n    } catch (error) {\n      throw new Error(\n        `Schema generation failed: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Generate an example JSON object based on the schema\n   * @param {string} rootName - Name of the root element\n   * @returns {Record<string, any>} - Example JSON object\n   */\n  generateExample(rootName: string = \"root\"): Record<string, any> {\n    const propNames = this.config.propNames;\n    const preserveNamespaces = this.config.preserveNamespaces;\n    const preserveComments = this.config.preserveComments;\n    const preserveCDATA = this.config.preserveCDATA;\n    const preserveProcessingInstr = this.config.preserveProcessingInstr;\n    const preserveAttributes = this.config.preserveAttributes;\n\n    // Simple example with common features\n    const example: Record<string, any> = {\n      [rootName]: {\n        [propNames.value]: \"Root content\",\n        [propNames.children]: [\n          {\n            child: {\n              [propNames.value]: \"Child content\",\n            },\n          },\n        ],\n      },\n    };\n\n    // Add namespace properties if enabled\n    if (preserveNamespaces) {\n      example[rootName][propNames.namespace] = \"http://example.org/ns\";\n      example[rootName][propNames.prefix] = \"ex\";\n      example[rootName][propNames.children][0].child[propNames.namespace] =\n        \"http://example.org/ns\";\n      example[rootName][propNames.children][0].child[propNames.prefix] = \"ex\";\n    }\n\n    // Add attributes if enabled\n    if (preserveAttributes) {\n      example[rootName][propNames.attributes] = [\n        { id: { [propNames.value]: \"root-1\" } },\n        { lang: { [propNames.value]: \"en\" } },\n      ];\n\n      if (preserveNamespaces) {\n        example[rootName][propNames.attributes][1].lang[propNames.prefix] =\n          \"xml\";\n      }\n\n      example[rootName][propNames.children][0].child[propNames.attributes] = [\n        { id: { [propNames.value]: \"child-1\" } },\n      ];\n    }\n\n    // Add CDATA if enabled\n    if (preserveCDATA) {\n      example[rootName][propNames.children][0].child[propNames.children] = [\n        { [propNames.cdata]: \"<data>Raw content</data>\" },\n      ];\n    }\n\n    // Add comments if enabled\n    if (preserveComments) {\n      if (!example[rootName][propNames.children][0].child[propNames.children]) {\n        example[rootName][propNames.children][0].child[propNames.children] = [];\n      }\n\n      example[rootName][propNames.children][0].child[propNames.children].push({\n        [propNames.comments]: \"Comment about the child\",\n      });\n    }\n\n    // Add processing instruction if enabled\n    if (preserveProcessingInstr) {\n      if (!example[rootName][propNames.children]) {\n        example[rootName][propNames.children] = [];\n      }\n\n      example[rootName][propNames.children].unshift({\n        [propNames.instruction]: {\n          [propNames.target]: \"xml-stylesheet\",\n          [propNames.value]: 'type=\"text/css\" href=\"style.css\"',\n        },\n      });\n    }\n\n    return example;\n  }\n}\n","/**\n * Utilities for applying value transformations\n */\nimport { Configuration } from '../types/config-types';\nimport { TransformContext, TransformDirection } from './ValueTransformer';\nimport { DOMAdapter } from '../adapters/dom-adapter';\n\n/**\n * Utility for applying value transformations\n */\nexport class TransformUtil {\n  private config: Configuration;\n\n  /**\n   * Create a new TransformUtil\n   * @param config Configuration\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n  }\n\n  /**\n   * Apply transforms to a value\n   * @param value Value to transform\n   * @param context Transformation context\n   * @returns Transformed value\n   */\n  applyTransforms(value: any, context: TransformContext): any {\n    // Skip transformation if no transformers are configured\n    if (!this.config.valueTransforms || this.config.valueTransforms.length === 0) {\n      return value;\n    }\n\n    // Apply each transformer in sequence\n    let transformedValue = value;\n    for (const transformer of this.config.valueTransforms) {\n      transformedValue = transformer.process(transformedValue, context);\n    }\n\n    return transformedValue;\n  }\n\n  /**\n   * Create a transform context\n   * @param direction Direction of transformation\n   * @param nodeName Name of the current node\n   * @param nodeType DOM node type\n   * @param options Additional context options\n   * @returns Transform context\n   */\n  createContext(\n    direction: TransformDirection,\n    nodeName: string,\n    nodeType: number,\n    options: {\n      path?: string;\n      namespace?: string;\n      prefix?: string;\n      isAttribute?: boolean;\n      attributeName?: string;\n      parent?: TransformContext;\n    } = {}\n  ): TransformContext {\n    return {\n      direction,\n      nodeName,\n      nodeType,\n      path: options.path || nodeName,\n      namespace: options.namespace,\n      prefix: options.prefix,\n      isAttribute: options.isAttribute || false,\n      attributeName: options.attributeName,\n      parent: options.parent,\n      config: this.config,\n    };\n  }\n\n  /**\n   * Get a user-friendly node type name for debugging\n   * @param nodeType DOM node type\n   * @returns String representation of node type\n   */\n  getNodeTypeName(nodeType: number): string {\n    return DOMAdapter.getNodeTypeName(nodeType);\n  }\n}","/**\n * XmlToJsonConverter class for converting XML to JSON with consistent namespace handling\n */\nimport { Configuration } from \"../types/config-types\";\nimport { XJXError } from \"../types/error-types\";\nimport { DOMAdapter } from \"../adapters/dom-adapter\";\nimport { JsonUtil } from \"../utils/json-utils\";\nimport { TransformUtil } from \"../transformers/TransformUtil\";\nimport { TransformContext } from \"../transformers/ValueTransformer\";\n\n/**\n * XmlToJsonConverter Parser for converting XML to JSON\n */\nexport class XmlToJsonConverter {\n  private config: Configuration;\n  private jsonUtil: JsonUtil;\n  private transformUtil: TransformUtil;\n\n  /**\n   * Constructor for XmlToJsonConverter\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n    this.jsonUtil = new JsonUtil(this.config);\n    this.transformUtil = new TransformUtil(this.config);\n  }\n\n  /**\n   * Convert XML string to JSON\n   * @param xmlString XML content as string\n   * @returns JSON object representing the XML content\n   */\n  public convert(xmlString: string): Record<string, any> {\n    try {\n      const xmlDoc = DOMAdapter.parseFromString(xmlString, \"text/xml\");\n\n      // Check for parsing errors\n      const errors = xmlDoc.getElementsByTagName(\"parsererror\");\n      if (errors.length > 0) {\n        throw new XJXError(`XML parsing error: ${errors[0].textContent}`);\n      }\n\n      return this.nodeToJson(xmlDoc.documentElement);\n    } catch (error) {\n      throw new XJXError(\n        `Failed to convert XML to JSON: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Convert a DOM node to JSON representation\n   * @param node DOM node to convert\n   * @param parentContext Optional parent context for transformation chain\n   * @param path Current path in the XML tree\n   * @returns JSON representation of the node\n   */\n  private nodeToJson(node: Node, parentContext?: TransformContext, path: string = \"\"): Record<string, any> {\n    const result: Record<string, any> = {};\n\n    // Handle element nodes\n    if (node.nodeType === DOMAdapter.NodeType.ELEMENT_NODE) {\n      const element = node as Element;\n      // Use localName instead of nodeName to strip namespace prefix\n      const nodeName =\n        element.localName ||\n        element.nodeName.split(\":\").pop() ||\n        element.nodeName;\n\n      // Update the current path\n      const currentPath = path ? `${path}.${nodeName}` : nodeName;\n\n      const nodeObj: Record<string, any> = {};\n\n      // Create context for this node\n      const context = this.transformUtil.createContext(\n        'xml-to-json',\n        nodeName,\n        node.nodeType,\n        {\n          path: currentPath,\n          namespace: element.namespaceURI || undefined,\n          prefix: element.prefix || undefined,\n          parent: parentContext\n        }\n      );\n\n      // Process namespaces if enabled\n      if (this.config.preserveNamespaces) {\n        const ns = element.namespaceURI;\n        if (ns) {\n          nodeObj[this.config.propNames.namespace] = ns;\n        }\n\n        const prefix = element.prefix;\n        if (prefix) {\n          nodeObj[this.config.propNames.prefix] = prefix;\n        }\n      }\n\n      // Process attributes if enabled\n      if (this.config.preserveAttributes && element.attributes.length > 0) {\n        const attrs: Array<Record<string, any>> = [];\n\n        for (let i = 0; i < element.attributes.length; i++) {\n          const attr = element.attributes[i];\n          // Strip namespace prefix from attribute name\n          const attrLocalName =\n            attr.localName || attr.name.split(\":\").pop() || attr.name;\n\n          // Create attribute context\n          const attrContext = this.transformUtil.createContext(\n            'xml-to-json',\n            nodeName,\n            node.nodeType,\n            {\n              path: `${currentPath}.${attrLocalName}`,\n              namespace: attr.namespaceURI || undefined,\n              prefix: attr.prefix || undefined,\n              isAttribute: true,\n              attributeName: attrLocalName,\n              parent: context\n            }\n          );\n\n          // Apply transformations to attribute value\n          const transformedValue = this.transformUtil.applyTransforms(\n            attr.value,\n            attrContext\n          );\n\n          // Create attribute object with consistent structure\n          const attrObj: Record<string, any> = {\n            [attrLocalName]: {\n              [this.config.propNames.value]: transformedValue,\n            },\n          };\n\n          // Add namespace info for attribute if present and enabled\n          if (this.config.preserveNamespaces) {\n            // Handle attribute namespace\n            if (attr.namespaceURI) {\n              attrObj[attrLocalName][this.config.propNames.namespace] =\n                attr.namespaceURI;\n            }\n\n            // Handle attribute prefix\n            if (attr.prefix) {\n              attrObj[attrLocalName][this.config.propNames.prefix] =\n                attr.prefix;\n            }\n          }\n\n          attrs.push(attrObj);\n        }\n\n        if (attrs.length > 0) {\n          nodeObj[this.config.propNames.attributes] = attrs;\n        }\n      }\n\n      // Process child nodes\n      if (element.childNodes.length > 0) {\n        const children: Array<Record<string, any>> = [];\n        const childrenKey = this.config.propNames.children;\n        const valueKey = this.config.propNames.value;\n        const cdataKey = this.config.propNames.cdata;\n        const commentsKey = this.config.propNames.comments;\n        const instructionKey = this.config.propNames.instruction;\n        const targetKey = this.config.propNames.target;\n\n        for (let i = 0; i < element.childNodes.length; i++) {\n          const child = element.childNodes[i];\n\n          // Text nodes - only process if preserveTextNodes is true\n          if (child.nodeType === DOMAdapter.NodeType.TEXT_NODE) {\n            if (this.config.preserveTextNodes) {\n              let text = child.nodeValue || \"\";\n\n              // Skip whitespace-only text nodes if whitespace preservation is disabled\n              if (!this.config.preserveWhitespace) {\n                if (text.trim() === \"\") {\n                  continue;\n                }\n                // Trim the text when preserveWhitespace is false\n                text = text.trim();\n              }\n\n              // Create text node context\n              const textContext = this.transformUtil.createContext(\n                'xml-to-json',\n                '#text',\n                child.nodeType,\n                {\n                  path: `${currentPath}.#text`,\n                  parent: context\n                }\n              );\n\n              // Apply transformations to text value\n              const transformedText = this.transformUtil.applyTransforms(\n                text,\n                textContext\n              );\n\n              children.push({ [valueKey]: transformedText });\n            }\n          }\n          // CDATA sections\n          else if (\n            child.nodeType === DOMAdapter.NodeType.CDATA_SECTION_NODE &&\n            this.config.preserveCDATA\n          ) {\n            // Create CDATA context\n            const cdataContext = this.transformUtil.createContext(\n              'xml-to-json',\n              '#cdata',\n              child.nodeType,\n              {\n                path: `${currentPath}.#cdata`,\n                parent: context\n              }\n            );\n\n            // Apply transformations to CDATA value\n            const transformedCData = this.transformUtil.applyTransforms(\n              child.nodeValue || \"\",\n              cdataContext\n            );\n\n            children.push({\n              [cdataKey]: transformedCData,\n            });\n          }\n          // Comments\n          else if (\n            child.nodeType === DOMAdapter.NodeType.COMMENT_NODE &&\n            this.config.preserveComments\n          ) {\n            children.push({\n              [commentsKey]: child.nodeValue || \"\",\n            });\n          }\n          // Processing instructions\n          else if (\n            child.nodeType ===\n              DOMAdapter.NodeType.PROCESSING_INSTRUCTION_NODE &&\n            this.config.preserveProcessingInstr\n          ) {\n            children.push({\n              [instructionKey]: {\n                [targetKey]: child.nodeName,\n                [valueKey]: child.nodeValue || \"\",\n              },\n            });\n          }\n          // Element nodes (recursive)\n          else if (child.nodeType === DOMAdapter.NodeType.ELEMENT_NODE) {\n            children.push(this.nodeToJson(child, context, currentPath));\n          }\n        }\n\n        if (children.length > 0) {\n          nodeObj[childrenKey] = children;\n        }\n      }\n\n      // Apply compact option - remove empty properties if enabled\n      if (this.config.outputOptions.compact) {\n        Object.keys(nodeObj).forEach((key) => {\n          const cleaned = this.cleanNode(nodeObj[key]);\n          if (cleaned === undefined) {\n            delete nodeObj[key];\n          } else {\n            nodeObj[key] = cleaned;\n          }\n        });\n      }\n\n      result[nodeName] = nodeObj;\n    }\n\n    return result;\n  }\n\n  private cleanNode(node: any): any {\n    if (Array.isArray(node)) {\n      // Clean each item in the array and filter out empty ones\n      const cleanedArray = node\n        .map((item) => this.cleanNode(item))\n        .filter((item) => {\n          return !(\n            item === null ||\n            item === undefined ||\n            (typeof item === \"object\" && Object.keys(item).length === 0)\n          );\n        });\n      return cleanedArray.length > 0 ? cleanedArray : undefined;\n    } else if (typeof node === \"object\" && node !== null) {\n      // Clean properties recursively\n      Object.keys(node).forEach((key) => {\n        const cleanedChild = this.cleanNode(node[key]);\n        if (\n          cleanedChild === null ||\n          cleanedChild === undefined ||\n          (Array.isArray(cleanedChild) && cleanedChild.length === 0) ||\n          (typeof cleanedChild === \"object\" &&\n            Object.keys(cleanedChild).length === 0)\n        ) {\n          delete node[key];\n        } else {\n          node[key] = cleanedChild;\n        }\n      });\n\n      // Handle the special case for nodes with only empty children/attributes\n      const childrenKey = this.config.propNames.children;\n      const attrsKey = this.config.propNames.attributes;\n      const keys = Object.keys(node);\n      if (\n        keys.every((key) => key === childrenKey || key === attrsKey) &&\n        (node[childrenKey] === undefined ||\n          this.jsonUtil.isEmpty(node[childrenKey])) &&\n        (node[attrsKey] === undefined || this.jsonUtil.isEmpty(node[attrsKey]))\n      ) {\n        return undefined;\n      }\n\n      return Object.keys(node).length > 0 ? node : undefined;\n    }\n\n    return node;\n  }\n}","/**\n * XMLUtil - Utility functions for XML processing\n */\nimport { XJXError } from \"../types/error-types\";\nimport { DOMAdapter } from \"../adapters/dom-adapter\";\nimport { Configuration } from \"../types/config-types\";\n\nexport class XmlUtil {\n  private config: Configuration;\n\n  /**\n   * Constructor for XMLUtil\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n  }\n\n  /**\n   * Pretty print an XML string\n   * @param xmlString XML string to format\n   * @returns Formatted XML string\n   */\n  prettyPrintXml(xmlString: string): string {\n    const indent = this.config.outputOptions.indent;\n    const INDENT = \" \".repeat(indent);\n\n    try {\n      const doc = DOMAdapter.parseFromString(xmlString, \"text/xml\");\n\n      const serializer = (node: Node, level = 0): string => {\n        const pad = INDENT.repeat(level);\n\n        switch (node.nodeType) {\n          case DOMAdapter.NodeType.ELEMENT_NODE: {\n            const el = node as Element;\n            const tagName = el.tagName;\n            const attrs = Array.from(el.attributes)\n              .map((a) => `${a.name}=\"${a.value}\"`)\n              .join(\" \");\n            const openTag = attrs ? `<${tagName} ${attrs}>` : `<${tagName}>`;\n\n            const children = Array.from(el.childNodes);\n\n            if (children.length === 0) {\n              return `${pad}${openTag.replace(/>$/, \" />\")}\\n`;\n            }\n\n            // Single text node: print inline\n            if (\n              children.length === 0 ||\n              (children.length === 1 &&\n                children[0].nodeType === DOMAdapter.NodeType.TEXT_NODE &&\n                children[0].textContent?.trim() === \"\")\n            ) {\n              // Empty or whitespace-only\n              return `${pad}<${tagName}${attrs ? \" \" + attrs : \"\"}></${tagName}>\\n`;\n            }\n\n            const inner = children\n              .map((child) => serializer(child, level + 1))\n              .join(\"\");\n            return `${pad}${openTag}\\n${inner}${pad}</${tagName}>\\n`;\n          }\n\n          case DOMAdapter.NodeType.TEXT_NODE: {\n            const text = node.textContent?.trim();\n            return text ? `${pad}${text}\\n` : \"\";\n          }\n\n          case DOMAdapter.NodeType.CDATA_SECTION_NODE:\n            return `${pad}<![CDATA[${node.nodeValue}]]>\\n`;\n\n          case DOMAdapter.NodeType.COMMENT_NODE:\n            return `${pad}<!--${node.nodeValue}-->\\n`;\n\n          case DOMAdapter.NodeType.PROCESSING_INSTRUCTION_NODE:\n            const pi = node as ProcessingInstruction;\n            return `${pad}<?${pi.target} ${pi.data}?>\\n`;\n\n          case DOMAdapter.NodeType.DOCUMENT_NODE:\n            return Array.from(node.childNodes)\n              .map((child) => serializer(child, level))\n              .join(\"\");\n\n          default:\n            return \"\";\n        }\n      };\n\n      return serializer(doc).trim();\n    } catch (error) {\n      throw new XJXError(\n        `Failed to pretty print XML: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Check if XML string is well-formed\n   * @param xmlString XML string to validate\n   * @returns Object with validation result and any error messages\n   */\n  validateXML(xmlString: string): {\n    isValid: boolean;\n    message?: string;\n  } {\n    try {\n      const doc = DOMAdapter.parseFromString(xmlString, \"text/xml\");\n      const errors = doc.getElementsByTagName(\"parsererror\");\n      if (errors.length > 0) {\n        return {\n          isValid: false,\n          message: errors[0].textContent || \"Unknown parsing error\",\n        };\n      }\n      return { isValid: true };\n    } catch (error) {\n      return {\n        isValid: false,\n        message: error instanceof Error ? error.message : String(error),\n      };\n    }\n  }\n\n  /**\n   * Add XML declaration to a string if missing\n   * @param xmlString XML string\n   * @returns XML string with declaration\n   */\n  ensureXMLDeclaration(xmlString: string): string {\n    if (!xmlString.trim().startsWith(\"<?xml\")) {\n      return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n' + xmlString;\n    }\n    return xmlString;\n  }\n\n  /**\n   * Escapes special characters in text for safe XML usage.\n   * @param text Text to escape.\n   * @returns Escaped XML string.\n   */\n  escapeXML(text: string): string {\n    if (typeof text !== \"string\" || text.length === 0) {\n      return \"\";\n    }\n\n    return text.replace(/[&<>\"']/g, (char) => {\n      switch (char) {\n        case \"&\":\n          return \"&amp;\";\n        case \"<\":\n          return \"&lt;\";\n        case \">\":\n          return \"&gt;\";\n        case '\"':\n          return \"&quot;\";\n        case \"'\":\n          return \"&apos;\";\n        default:\n          return char;\n      }\n    });\n  }\n\n  /**\n   * Unescapes XML entities back to their character equivalents.\n   * @param text Text with XML entities.\n   * @returns Unescaped text.\n   */\n  unescapeXML(text: string): string {\n    if (typeof text !== \"string\" || text.length === 0) {\n      return \"\";\n    }\n\n    return text.replace(/&(amp|lt|gt|quot|apos);/g, (match, entity) => {\n      switch (entity) {\n        case \"amp\":\n          return \"&\";\n        case \"lt\":\n          return \"<\";\n        case \"gt\":\n          return \">\";\n        case \"quot\":\n          return '\"';\n        case \"apos\":\n          return \"'\";\n        default:\n          return match;\n      }\n    });\n  }\n\n  /**\n   * Extract the namespace prefix from a qualified name\n   * @param qualifiedName Qualified name (e.g., \"ns:element\")\n   * @returns Prefix or null if no prefix\n   */\n  extractPrefix(qualifiedName: string): string | null {\n    const colonIndex = qualifiedName.indexOf(\":\");\n    return colonIndex > 0 ? qualifiedName.substring(0, colonIndex) : null;\n  }\n\n  /**\n   * Extract the local name from a qualified name\n   * @param qualifiedName Qualified name (e.g., \"ns:element\")\n   * @returns Local name\n   */\n  extractLocalName(qualifiedName: string): string {\n    const colonIndex = qualifiedName.indexOf(\":\");\n    return colonIndex > 0\n      ? qualifiedName.substring(colonIndex + 1)\n      : qualifiedName;\n  }\n\n  /**\n   * Create a qualified name from prefix and local name\n   * @param prefix Namespace prefix (can be null)\n   * @param localName Local name\n   * @returns Qualified name\n   */\n  createQualifiedName(prefix: string | null, localName: string): string {\n    return prefix ? `${prefix}:${localName}` : localName;\n  }\n}","/**\n * JsonToXmlConverter class for converting JSON to XML with consistent namespace handling\n */\nimport { Configuration } from \"../types/config-types\";\nimport { XJXError } from \"../types/error-types\";\nimport { DOMAdapter } from \"../adapters/dom-adapter\";\nimport { XmlUtil } from \"../utils/xml-utils\";\nimport { TransformUtil } from \"../transformers/TransformUtil\";\nimport { TransformContext } from \"../transformers/ValueTransformer\";\n\n/**\n * JsonToXmlConverter for converting JSON to XML\n */\nexport class JsonToXmlConverter {\n  private config: Configuration;\n  private xmlUtil: XmlUtil;\n  private transformUtil: TransformUtil;\n\n  /**\n   * Constructor for JsonToXmlConverter\n   * @param config Configuration options\n   */\n  constructor(config: Configuration) {\n    this.config = config;\n    this.xmlUtil = new XmlUtil(this.config);\n    this.transformUtil = new TransformUtil(this.config);\n  }\n\n  /**\n   * Convert JSON object to XML string\n   * @param jsonObj JSON object to convert\n   * @returns XML string\n   */\n  public convert(jsonObj: Record<string, any>): string {\n    try {\n      const doc = DOMAdapter.createDocument();\n      const rootElement = this.jsonToNode(jsonObj, doc);\n\n      if (rootElement) {\n        // Handle the temporary root element if it exists\n        if (doc.documentElement && doc.documentElement.nodeName === \"temp\") {\n          doc.replaceChild(rootElement, doc.documentElement);\n        } else {\n          doc.appendChild(rootElement);\n        }\n      }\n\n      // Add XML declaration if specified\n      let xmlString = DOMAdapter.serializeToString(doc);\n\n      // remove xhtml decl inserted by dom\n      xmlString = xmlString.replace(' xmlns=\"http://www.w3.org/1999/xhtml\"', '');\n\n      if (this.config.outputOptions.xml.declaration) {\n        xmlString = this.xmlUtil.ensureXMLDeclaration(xmlString);\n      }\n\n      // Apply pretty printing if enabled\n      if (this.config.outputOptions.prettyPrint) {\n        xmlString = this.xmlUtil.prettyPrintXml(xmlString);\n      }\n\n      return xmlString;\n    } catch (error) {\n      throw new XJXError(\n        `Failed to convert JSON to XML: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  }\n\n  /**\n   * Convert JSON object to DOM node\n   * @param jsonObj JSON object to convert\n   * @param doc Document for creating elements\n   * @param parentContext Optional parent context for transformation chain\n   * @param path Current path in the JSON object\n   * @returns DOM Element\n   */\n  private jsonToNode(\n    jsonObj: Record<string, any>,\n    doc: Document,\n    parentContext?: TransformContext,\n    path: string = \"\"\n  ): Element | null {\n    if (!jsonObj || typeof jsonObj !== \"object\") {\n      return null;\n    }\n\n    // Get the node name (first key in the object)\n    const nodeName = Object.keys(jsonObj)[0];\n    if (!nodeName) {\n      return null;\n    }\n\n    const nodeData = jsonObj[nodeName];\n    \n    // Update the current path\n    const currentPath = path ? `${path}.${nodeName}` : nodeName;\n\n    // Create element with namespace if available\n    let element: Element;\n    const namespaceKey = this.config.propNames.namespace;\n    const prefixKey = this.config.propNames.prefix;\n    const ns = nodeData[namespaceKey];\n    const prefix = nodeData[prefixKey];\n\n    // Create context for this node\n    const context = this.transformUtil.createContext(\n      'json-to-xml',\n      nodeName,\n      DOMAdapter.NodeType.ELEMENT_NODE,\n      {\n        path: currentPath,\n        namespace: ns,\n        prefix: prefix,\n        parent: parentContext\n      }\n    );\n\n    if (ns && this.config.preserveNamespaces) {\n      if (prefix) {\n        // Create element with namespace and prefix\n        element = DOMAdapter.createElementNS(ns, `${prefix}:${nodeName}`);\n      } else {\n        // Create element with namespace but no prefix\n        element = DOMAdapter.createElementNS(ns, nodeName);\n      }\n    } else {\n      // Create element without namespace\n      element = DOMAdapter.createElement(nodeName);\n    }\n\n    // Process attributes if enabled\n    const attributesKey = this.config.propNames.attributes;\n    const valueKey = this.config.propNames.value;\n    if (\n      this.config.preserveAttributes &&\n      nodeData[attributesKey] &&\n      Array.isArray(nodeData[attributesKey])\n    ) {\n      nodeData[attributesKey].forEach(\n        (attrObj: Record<string, any>) => {\n          const attrName = Object.keys(attrObj)[0];\n          if (!attrName) return;\n\n          const attrData = attrObj[attrName];\n          \n          // Create attribute context\n          const attrContext = this.transformUtil.createContext(\n            'json-to-xml',\n            nodeName,\n            DOMAdapter.NodeType.ELEMENT_NODE,\n            {\n              path: `${currentPath}.${attrName}`,\n              namespace: attrData[namespaceKey],\n              prefix: attrData[prefixKey],\n              isAttribute: true,\n              attributeName: attrName,\n              parent: context\n            }\n          );\n          \n          // Apply transformations to attribute value\n          const transformedValue = this.transformUtil.applyTransforms(\n            attrData[valueKey] || \"\",\n            attrContext\n          );\n          \n          const attrNs = attrData[namespaceKey];\n          const attrPrefix = attrData[prefixKey];\n\n          // Form qualified name for attribute if it has a prefix\n          let qualifiedName = attrName;\n          if (attrPrefix && this.config.preserveNamespaces) {\n            qualifiedName = `${attrPrefix}:${attrName}`;\n          }\n\n          DOMAdapter.setNamespacedAttribute(\n            element, \n            (attrNs && this.config.preserveNamespaces) ? attrNs : null, \n            qualifiedName, \n            transformedValue\n          );\n        }\n      );\n    }\n\n    // Process simple text value\n    if (nodeData[valueKey] !== undefined) {\n      // Apply transformations to text value\n      const textContext = this.transformUtil.createContext(\n        'json-to-xml',\n        nodeName,\n        DOMAdapter.NodeType.TEXT_NODE,\n        {\n          path: `${currentPath}.#text`,\n          namespace: ns,\n          prefix: prefix,\n          parent: context\n        }\n      );\n      \n      const transformedValue = this.transformUtil.applyTransforms(\n        nodeData[valueKey],\n        textContext\n      );\n      \n      element.textContent = transformedValue;\n    }\n\n    // Process children\n    const childrenKey = this.config.propNames.children;\n    const cdataKey = this.config.propNames.cdata;\n    const commentsKey = this.config.propNames.comments;\n    const instructionKey = this.config.propNames.instruction;\n    const targetKey = this.config.propNames.target;\n\n    if (\n      nodeData[childrenKey] &&\n      Array.isArray(nodeData[childrenKey])\n    ) {\n      nodeData[childrenKey].forEach(\n        (child: Record<string, any>) => {\n          // Text nodes\n          if (\n            child[valueKey] !== undefined &&\n            this.config.preserveTextNodes\n          ) {\n            // Apply transformations to text node\n            const textContext = this.transformUtil.createContext(\n              'json-to-xml',\n              '#text',\n              DOMAdapter.NodeType.TEXT_NODE,\n              {\n                path: `${currentPath}.#text`,\n                parent: context\n              }\n            );\n            \n            const transformedText = this.transformUtil.applyTransforms(\n              child[valueKey],\n              textContext\n            );\n            \n            element.appendChild(\n              DOMAdapter.createTextNode(this.xmlUtil.escapeXML(transformedText))\n            );\n          }\n          // CDATA sections\n          else if (\n            child[cdataKey] !== undefined &&\n            this.config.preserveCDATA\n          ) {\n            // Apply transformations to CDATA\n            const cdataContext = this.transformUtil.createContext(\n              'json-to-xml',\n              '#cdata',\n              DOMAdapter.NodeType.CDATA_SECTION_NODE,\n              {\n                path: `${currentPath}.#cdata`,\n                parent: context\n              }\n            );\n            \n            const transformedCData = this.transformUtil.applyTransforms(\n              child[cdataKey],\n              cdataContext\n            );\n            \n            element.appendChild(\n              DOMAdapter.createCDATASection(\n                transformedCData\n              )\n            );\n          }\n          // Comments\n          else if (\n            child[commentsKey] !== undefined &&\n            this.config.preserveComments\n          ) {\n            element.appendChild(\n              DOMAdapter.createComment(\n                child[commentsKey]\n              )\n            );\n          }\n          // Processing instructions\n          else if (\n            child[instructionKey] !== undefined &&\n            this.config.preserveProcessingInstr\n          ) {\n            const piData = child[instructionKey];\n            const target = piData[targetKey];\n            const data = piData[valueKey] || \"\";\n\n            if (target) {\n              element.appendChild(\n                DOMAdapter.createProcessingInstruction(target, data)\n              );\n            }\n          }\n          // Element nodes (recursive)\n          else {\n            const childElement = this.jsonToNode(child, doc, context, currentPath);\n            if (childElement) {\n              element.appendChild(childElement);\n            }\n          }\n        }\n      );\n    }\n\n    return element;\n  }\n}","/**\n * Default configuration for the XJX library\n */\nimport { Configuration } from '../types/config-types';\n\n/**\n * Default configuration\n */\nexport const DEFAULT_CONFIG: Configuration = {\n  preserveNamespaces: true,\n  preserveComments: true,\n  preserveProcessingInstr: true,\n  preserveCDATA: true,\n  preserveTextNodes: true,\n  preserveWhitespace: false,\n  preserveAttributes: true,\n\n  outputOptions: {\n    prettyPrint: true,\n    indent: 2,\n    compact: true,\n    json: {},\n    xml: {\n      declaration: true,\n    },\n  },\n\n  propNames: {\n    namespace: \"$ns\",\n    prefix: \"$pre\",\n    attributes: \"$attr\",\n    value: \"$val\",\n    cdata: \"$cdata\",\n    comments: \"$cmnt\",\n    instruction: \"$pi\", \n    target: \"$trgt\",  \n    children: \"$children\",\n  },\n};","/**\n * XJX - Facade class for XML-JSON conversion operations\n */\nimport { XmlToJsonConverter } from \"./core/converters/xml-to-json-converter\";\nimport { JsonToXmlConverter } from \"./core/converters/json-to-xml-converter\";\nimport { Configuration } from \"./core/types/config-types\";\nimport { DEFAULT_CONFIG } from \"./core/config/config\";\nimport { DOMAdapter } from \"./core/adapters/dom-adapter\";\nimport { XmlUtil } from \"./core/utils/xml-utils\";\nimport { JsonUtil } from \"./core/utils/json-utils\";\nimport { ValueTransformer } from \"./core/transformers\";\n\nexport class XJX {\n  private config: Configuration;\n  private xmlToJsonConverter: XmlToJsonConverter;\n  private jsonToXmlConverter: JsonToXmlConverter;\n  private jsonUtil: JsonUtil;\n  private xmlUtil: XmlUtil;\n\n  /**\n   * Constructor for XJX utility\n   * @param config Configuration options\n   */\n  constructor(config: Partial<Configuration> = {}) {\n    // First create a jsonUtil instance with default config to use its methods\n    this.jsonUtil = new JsonUtil(DEFAULT_CONFIG);\n\n    // Create a deep clone of the default config\n    const defaultClone = this.jsonUtil.deepClone(DEFAULT_CONFIG);\n\n    // Deep merge with the provided config\n    this.config = this.jsonUtil.deepMerge<Configuration>(defaultClone, config);\n\n    // Re-initialize jsonUtil with the merged config\n    this.jsonUtil = new JsonUtil(this.config);\n\n    // Initialize other components\n    this.xmlUtil = new XmlUtil(this.config);\n    this.xmlToJsonConverter = new XmlToJsonConverter(this.config);\n    this.jsonToXmlConverter = new JsonToXmlConverter(this.config);\n  }\n\n  /**\n   * Convert XML string to JSON\n   * @param xmlString XML content as string\n   * @returns JSON object representing the XML content\n   */\n  public xmlToJson(xmlString: string): Record<string, any> {\n    return this.xmlToJsonConverter.convert(xmlString);\n  }\n\n  /**\n   * Convert JSON object back to XML string\n   * @param jsonObj JSON object to convert\n   * @returns XML string\n   */\n  public jsonToXml(jsonObj: Record<string, any>): string {\n    return this.jsonToXmlConverter.convert(jsonObj);\n  }\n\n  /**\n   * Pretty print an XML string\n   * @param xmlString XML string to format\n   * @returns Formatted XML string\n   */\n  public prettyPrintXml(xmlString: string): string {\n    return this.xmlUtil.prettyPrintXml(xmlString);\n  }\n\n  /**\n   * Safely retrieves a value from a JSON object using a dot-separated path.\n   * @param obj The input JSON object\n   * @param path The dot-separated path string (e.g., \"root.item.description.$val\")\n   * @param fallback Value to return if the path does not resolve\n   * @returns The value at the specified path or the fallback value\n   */\n  public getPath(\n    obj: Record<string, any>,\n    path: string,\n    fallback: any = undefined\n  ): any {\n    return this.jsonUtil.getPath(obj, path, fallback);\n  }\n\n  /**\n   * Validate XML string\n   * @param xmlString XML string to validate\n   * @returns Validation result\n   */\n  public validateXML(xmlString: string): {\n    isValid: boolean;\n    message?: string;\n  } {\n    return this.xmlUtil.validateXML(xmlString);\n  }\n\n  /**\n   * Generate a JSON schema based on the current configuration\n   * @returns JSON schema object for validating XML-JSON documents\n   */\n  public generateJsonSchema(): Record<string, any> {\n    return this.jsonUtil.generateJsonSchema();\n  }\n\n  /**\n   * Convert a standard JSON object to the XML-like JSON structure\n   * @param obj Standard JSON object\n   * @param root Optional root element configuration (string or object with properties)\n   * @returns XML-like JSON object ready for conversion to XML\n   */\n  public objectToXJX(obj: any, root?: string | Record<string, any>): Record<string, any> {\n    return this.jsonUtil.objectToXJX(obj, root);\n  }\n\n  /**\n   * Generate an example JSON object that matches the current configuration\n   * @param rootName Name of the root element\n   * @returns Example JSON object\n   */\n  public generateJsonExample(rootName: string = \"root\"): Record<string, any> {\n    return this.jsonUtil.generateExample(rootName);\n  }\n\n  /**\n   * Add a value transformer to the configuration\n   * @param transformer Value transformer to add\n   * @returns This XJX instance for chaining\n   */\n  public addTransformer(transformer: ValueTransformer): XJX {\n    if (!this.config.valueTransforms) {\n      this.config.valueTransforms = [];\n    }\n    this.config.valueTransforms.push(transformer);\n    return this;\n  }\n\n  /**\n   * Removes all value transformers from the configuration\n   * @returns This XJX instance for chaining\n   */\n  public clearTransformers(): XJX {\n    this.config.valueTransforms = [];\n    return this;\n  }\n\n  /**\n   * Clean up any resources\n   */\n  public cleanup(): void {\n    DOMAdapter.cleanup();\n  }\n}","/**\n * Value transformation types and base class for the XJX library\n */\nimport { Configuration } from '../types/config-types';\n\n/**\n * Direction of the transformation\n */\nexport type TransformDirection = 'xml-to-json' | 'json-to-xml';\n\n/**\n * Context provided to value transformers\n */\nexport interface TransformContext {\n  // Core transformation info\n  direction: TransformDirection;  // Direction of the current transformation\n  \n  // Node information\n  nodeName: string;              // Name of the current node\n  nodeType: number;              // DOM node type (element, text, etc.)\n  namespace?: string;            // Namespace URI if available\n  prefix?: string;               // Namespace prefix if available\n  \n  // Structure information\n  path: string;                  // Dot-notation path to current node\n  isAttribute: boolean;          // Whether the current value is from an attribute\n  attributeName?: string;        // Name of attribute if isAttribute is true\n  \n  // Parent context (creates a chain)\n  parent?: TransformContext;     // Reference to parent context for traversal\n  \n  // Configuration reference\n  config: Configuration;         // Reference to the current configuration\n}\n\n/**\n * Abstract base class for value transformers\n */\nexport abstract class ValueTransformer {\n  /**\n   * Process a value, transforming it if applicable\n   * @param value Value to potentially transform\n   * @param context Context including direction and other information\n   * @returns Transformed value or original if not applicable\n   */\n  process(value: any, context: TransformContext): any {\n    if (context.direction === 'xml-to-json') {\n      return this.xmlToJson(value, context);\n    } else {\n      return this.jsonToXml(value, context);\n    }\n  }\n\n  /**\n   * Transform a value from XML to JSON representation\n   * @param value Value from XML\n   * @param context Transformation context\n   * @returns Transformed value for JSON\n   */\n  protected xmlToJson(value: any, context: TransformContext): any {\n    // Default implementation returns original value\n    return value;\n  }\n\n  /**\n   * Transform a value from JSON to XML representation\n   * @param value Value from JSON\n   * @param context Transformation context\n   * @returns Transformed value for XML\n   */\n  protected jsonToXml(value: any, context: TransformContext): any {\n    // Default implementation returns original value\n    return value;\n  }\n}","// Import locally so you can use it below\nimport { XJX } from './XJX';\n\n// Core components\nexport { XJX };\nexport { Configuration } from './core/types/config-types';\nexport { DEFAULT_CONFIG } from './core/config/config';\n\n// Error handling\nexport { XJXError } from './core/types/error-types';\n\n// Allow custom transformers\nexport { ValueTransformer } from './core/transformers/ValueTransformer';\n\n// Default export\nexport default XJX;"],"names":[],"mappings":"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"}